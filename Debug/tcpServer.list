
tcpServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c84  08005c84  000070a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c8c  08005c8c  000070a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c8c  08005c8c  00006c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c90  08005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08005c94  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070a4  2**0
                  CONTENTS
 10 .bss          00000488  200000a4  200000a4  000070a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000052c  2000052c  000070a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3f0  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8d  00000000  00000000  000134c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00015258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000872  00000000  00000000  00015d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195cc  00000000  00000000  0001659a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d450  00000000  00000000  0002fb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1512  00000000  00000000  0003cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000de4c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003130  00000000  00000000  000de50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  000e163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059a8 	.word	0x080059a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080059a8 	.word	0x080059a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80002a8:	4b22      	ldr	r3, [pc, #136]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002ae:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d003      	beq.n	80002c4 <WIZCHIP_READ+0x24>
 80002bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d114      	bne.n	80002ee <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	0c12      	lsrs	r2, r2, #16
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	4610      	mov	r0, r2
 80002d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002d2:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002d4:	6a1b      	ldr	r3, [r3, #32]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	0a12      	lsrs	r2, r2, #8
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	4610      	mov	r0, r2
 80002de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002e0:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <WIZCHIP_READ+0x94>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	4610      	mov	r0, r2
 80002ea:	4798      	blx	r3
 80002ec:	e011      	b.n	8000312 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	0c1b      	lsrs	r3, r3, #16
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000304:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <WIZCHIP_READ+0x94>)
 8000306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000308:	f107 020c 	add.w	r2, r7, #12
 800030c:	2103      	movs	r1, #3
 800030e:	4610      	mov	r0, r2
 8000310:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <WIZCHIP_READ+0x94>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	4798      	blx	r3
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <WIZCHIP_READ+0x94>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000322:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <WIZCHIP_READ+0x94>)
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	4798      	blx	r3
   return ret;
 8000328:	7bfb      	ldrb	r3, [r7, #15]
}
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000004 	.word	0x20000004

08000338 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4798      	blx	r3
   WIZCHIP.CS._select();
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000358:	4b1d      	ldr	r3, [pc, #116]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 800035a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800035c:	2b00      	cmp	r3, #0
 800035e:	d119      	bne.n	8000394 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	0c12      	lsrs	r2, r2, #16
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	4610      	mov	r0, r2
 800036c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 8000370:	6a1b      	ldr	r3, [r3, #32]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	0a12      	lsrs	r2, r2, #8
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	4610      	mov	r0, r2
 800037a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	78fa      	ldrb	r2, [r7, #3]
 800038e:	4610      	mov	r0, r2
 8000390:	4798      	blx	r3
 8000392:	e013      	b.n	80003bc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	0c1b      	lsrs	r3, r3, #16
 8000398:	b2db      	uxtb	r3, r3
 800039a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	0a1b      	lsrs	r3, r3, #8
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 80003b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003b2:	f107 020c 	add.w	r2, r7, #12
 80003b6:	2104      	movs	r1, #4
 80003b8:	4610      	mov	r0, r2
 80003ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003c2:	4b03      	ldr	r3, [pc, #12]	@ (80003d0 <WIZCHIP_WRITE+0x98>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	4798      	blx	r3
}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000004 	.word	0x20000004

080003d4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b087      	sub	sp, #28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	4613      	mov	r3, r2
 80003e0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80003e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80003e8:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80003ee:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 80003f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d003      	beq.n	80003fe <WIZCHIP_READ_BUF+0x2a>
 80003f6:	4b26      	ldr	r3, [pc, #152]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 80003f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d126      	bne.n	800044c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80003fe:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	0c12      	lsrs	r2, r2, #16
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	4610      	mov	r0, r2
 800040a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800040c:	4b20      	ldr	r3, [pc, #128]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 800040e:	6a1b      	ldr	r3, [r3, #32]
 8000410:	68fa      	ldr	r2, [r7, #12]
 8000412:	0a12      	lsrs	r2, r2, #8
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	4610      	mov	r0, r2
 8000418:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800041a:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	4610      	mov	r0, r2
 8000424:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	82fb      	strh	r3, [r7, #22]
 800042a:	e00a      	b.n	8000442 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800042c:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	8afa      	ldrh	r2, [r7, #22]
 8000432:	68b9      	ldr	r1, [r7, #8]
 8000434:	188c      	adds	r4, r1, r2
 8000436:	4798      	blx	r3
 8000438:	4603      	mov	r3, r0
 800043a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800043c:	8afb      	ldrh	r3, [r7, #22]
 800043e:	3301      	adds	r3, #1
 8000440:	82fb      	strh	r3, [r7, #22]
 8000442:	8afa      	ldrh	r2, [r7, #22]
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	429a      	cmp	r2, r3
 8000448:	d3f0      	bcc.n	800042c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800044a:	e017      	b.n	800047c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	0c1b      	lsrs	r3, r3, #16
 8000450:	b2db      	uxtb	r3, r3
 8000452:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	b2db      	uxtb	r3, r3
 800045a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 8000464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000466:	f107 0210 	add.w	r2, r7, #16
 800046a:	2103      	movs	r1, #3
 800046c:	4610      	mov	r0, r2
 800046e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 8000472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000474:	88fa      	ldrh	r2, [r7, #6]
 8000476:	4611      	mov	r1, r2
 8000478:	68b8      	ldr	r0, [r7, #8]
 800047a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800047c:	4b04      	ldr	r3, [pc, #16]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000482:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <WIZCHIP_READ_BUF+0xbc>)
 8000484:	691b      	ldr	r3, [r3, #16]
 8000486:	4798      	blx	r3
}
 8000488:	bf00      	nop
 800048a:	371c      	adds	r7, #28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	20000004 	.word	0x20000004

08000494 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	4613      	mov	r3, r2
 80004a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80004a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80004b6:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d126      	bne.n	800050c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80004be:	4b24      	ldr	r3, [pc, #144]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004c0:	6a1b      	ldr	r3, [r3, #32]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	0c12      	lsrs	r2, r2, #16
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	4610      	mov	r0, r2
 80004ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	0a12      	lsrs	r2, r2, #8
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	4610      	mov	r0, r2
 80004d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80004da:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	4610      	mov	r0, r2
 80004e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	82fb      	strh	r3, [r7, #22]
 80004ea:	e00a      	b.n	8000502 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 80004ee:	6a1b      	ldr	r3, [r3, #32]
 80004f0:	8afa      	ldrh	r2, [r7, #22]
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	440a      	add	r2, r1
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	4610      	mov	r0, r2
 80004fa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80004fc:	8afb      	ldrh	r3, [r7, #22]
 80004fe:	3301      	adds	r3, #1
 8000500:	82fb      	strh	r3, [r7, #22]
 8000502:	8afa      	ldrh	r2, [r7, #22]
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	429a      	cmp	r2, r3
 8000508:	d3f0      	bcc.n	80004ec <WIZCHIP_WRITE_BUF+0x58>
 800050a:	e017      	b.n	800053c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	b2db      	uxtb	r3, r3
 8000512:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	0a1b      	lsrs	r3, r3, #8
 8000518:	b2db      	uxtb	r3, r3
 800051a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 8000524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000526:	f107 0210 	add.w	r2, r7, #16
 800052a:	2103      	movs	r1, #3
 800052c:	4610      	mov	r0, r2
 800052e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 8000532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000534:	88fa      	ldrh	r2, [r7, #6]
 8000536:	4611      	mov	r1, r2
 8000538:	68b8      	ldr	r0, [r7, #8]
 800053a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000542:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <WIZCHIP_WRITE_BUF+0xbc>)
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	4798      	blx	r3
}
 8000548:	bf00      	nop
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000004 	.word	0x20000004

08000554 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800055e:	2300      	movs	r3, #0
 8000560:	81fb      	strh	r3, [r7, #14]
 8000562:	2300      	movs	r3, #0
 8000564:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	3301      	adds	r3, #1
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe94 	bl	80002a0 <WIZCHIP_READ>
 8000578:	4603      	mov	r3, r0
 800057a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800057c:	89bb      	ldrh	r3, [r7, #12]
 800057e:	021b      	lsls	r3, r3, #8
 8000580:	b29c      	uxth	r4, r3
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	3301      	adds	r3, #1
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe86 	bl	80002a0 <WIZCHIP_READ>
 8000594:	4603      	mov	r3, r0
 8000596:	4423      	add	r3, r4
 8000598:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800059a:	89bb      	ldrh	r3, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d019      	beq.n	80005d4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	3301      	adds	r3, #1
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe77 	bl	80002a0 <WIZCHIP_READ>
 80005b2:	4603      	mov	r3, r0
 80005b4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	b29c      	uxth	r4, r3
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	3301      	adds	r3, #1
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe69 	bl	80002a0 <WIZCHIP_READ>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4423      	add	r3, r4
 80005d2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80005d4:	89fa      	ldrh	r2, [r7, #14]
 80005d6:	89bb      	ldrh	r3, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d1c4      	bne.n	8000566 <getSn_TX_FSR+0x12>
   return val;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}

080005e6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	81fb      	strh	r3, [r7, #14]
 80005f4:	2300      	movs	r3, #0
 80005f6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	3301      	adds	r3, #1
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fe4b 	bl	80002a0 <WIZCHIP_READ>
 800060a:	4603      	mov	r3, r0
 800060c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800060e:	89bb      	ldrh	r3, [r7, #12]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b29c      	uxth	r4, r3
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	3301      	adds	r3, #1
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fe3d 	bl	80002a0 <WIZCHIP_READ>
 8000626:	4603      	mov	r3, r0
 8000628:	4423      	add	r3, r4
 800062a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800062c:	89bb      	ldrh	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d019      	beq.n	8000666 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	3301      	adds	r3, #1
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe2e 	bl	80002a0 <WIZCHIP_READ>
 8000644:	4603      	mov	r3, r0
 8000646:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	b29c      	uxth	r4, r3
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	3301      	adds	r3, #1
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe20 	bl	80002a0 <WIZCHIP_READ>
 8000660:	4603      	mov	r3, r0
 8000662:	4423      	add	r3, r4
 8000664:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000666:	89fa      	ldrh	r2, [r7, #14]
 8000668:	89bb      	ldrh	r3, [r7, #12]
 800066a:	429a      	cmp	r2, r3
 800066c:	d1c4      	bne.n	80005f8 <getSn_RX_RSR+0x12>
   return val;
 800066e:	89fb      	ldrh	r3, [r7, #14]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bd90      	pop	{r4, r7, pc}

08000678 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	4613      	mov	r3, r2
 8000686:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000690:	88bb      	ldrh	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d046      	beq.n	8000724 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	3301      	adds	r3, #1
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fdfc 	bl	80002a0 <WIZCHIP_READ>
 80006a8:	4603      	mov	r3, r0
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b29c      	uxth	r4, r3
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	3301      	adds	r3, #1
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdf0 	bl	80002a0 <WIZCHIP_READ>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4423      	add	r3, r4
 80006c4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	021a      	lsls	r2, r3, #8
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	461a      	mov	r2, r3
 80006da:	6839      	ldr	r1, [r7, #0]
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f7ff fed9 	bl	8000494 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	88bb      	ldrh	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	3301      	adds	r3, #1
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80006f6:	461a      	mov	r2, r3
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	4610      	mov	r0, r2
 8000704:	f7ff fe18 	bl	8000338 <WIZCHIP_WRITE>
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	3301      	adds	r3, #1
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000714:	461a      	mov	r2, r3
 8000716:	89fb      	ldrh	r3, [r7, #14]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	4610      	mov	r0, r2
 800071e:	f7ff fe0b 	bl	8000338 <WIZCHIP_WRITE>
 8000722:	e000      	b.n	8000726 <wiz_send_data+0xae>
   if(len == 0)  return;
 8000724:	bf00      	nop
}
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000744:	88bb      	ldrh	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d046      	beq.n	80007d8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	3301      	adds	r3, #1
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fda2 	bl	80002a0 <WIZCHIP_READ>
 800075c:	4603      	mov	r3, r0
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b29c      	uxth	r4, r3
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	3301      	adds	r3, #1
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd96 	bl	80002a0 <WIZCHIP_READ>
 8000774:	4603      	mov	r3, r0
 8000776:	4423      	add	r3, r4
 8000778:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	021a      	lsls	r2, r3, #8
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3303      	adds	r3, #3
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	4413      	add	r3, r2
 8000788:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	461a      	mov	r2, r3
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	68b8      	ldr	r0, [r7, #8]
 8000792:	f7ff fe1f 	bl	80003d4 <WIZCHIP_READ_BUF>
   ptr += len;
 8000796:	89fa      	ldrh	r2, [r7, #14]
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	3301      	adds	r3, #1
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80007aa:	461a      	mov	r2, r3
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	4610      	mov	r0, r2
 80007b8:	f7ff fdbe 	bl	8000338 <WIZCHIP_WRITE>
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	3301      	adds	r3, #1
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80007c8:	461a      	mov	r2, r3
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f7ff fdb1 	bl	8000338 <WIZCHIP_WRITE>
 80007d6:	e000      	b.n	80007da <wiz_recv_data+0xae>
   if(len == 0) return;
 80007d8:	bf00      	nop
}
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	460b      	mov	r3, r1
 80007f8:	80bb      	strh	r3, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 80007fe:	2300      	movs	r3, #0
 8000800:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b07      	cmp	r3, #7
 8000806:	d902      	bls.n	800080e <socket+0x2e>
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	e10d      	b.n	8000a2a <socket+0x24a>
   switch (protocol & 0x0F)
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	3b01      	subs	r3, #1
 8000816:	2b0d      	cmp	r3, #13
 8000818:	d82c      	bhi.n	8000874 <socket+0x94>
 800081a:	a201      	add	r2, pc, #4	@ (adr r2, 8000820 <socket+0x40>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000859 	.word	0x08000859
 8000824:	0800087b 	.word	0x0800087b
 8000828:	0800087b 	.word	0x0800087b
 800082c:	0800087b 	.word	0x0800087b
 8000830:	08000875 	.word	0x08000875
 8000834:	08000875 	.word	0x08000875
 8000838:	08000875 	.word	0x08000875
 800083c:	08000875 	.word	0x08000875
 8000840:	08000875 	.word	0x08000875
 8000844:	0800087b 	.word	0x0800087b
 8000848:	0800087b 	.word	0x0800087b
 800084c:	08000875 	.word	0x08000875
 8000850:	08000875 	.word	0x08000875
 8000854:	0800087b 	.word	0x0800087b
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000864:	f7ff fdb6 	bl	80003d4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d107      	bne.n	800087e <socket+0x9e>
 800086e:	f06f 0302 	mvn.w	r3, #2
 8000872:	e0da      	b.n	8000a2a <socket+0x24a>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8000874:	f06f 0304 	mvn.w	r3, #4
 8000878:	e0d7      	b.n	8000a2a <socket+0x24a>
         break; 
 800087a:	bf00      	nop
 800087c:	e000      	b.n	8000880 <socket+0xa0>
            break;
 800087e:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <socket+0xb0>
 800088a:	f06f 0305 	mvn.w	r3, #5
 800088e:	e0cc      	b.n	8000a2a <socket+0x24a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d028      	beq.n	80008e8 <socket+0x108>
   {
      switch(protocol)
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d002      	beq.n	80008a2 <socket+0xc2>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d008      	beq.n	80008b2 <socket+0xd2>
         break;

#endif 

         default:
            break;
 80008a0:	e022      	b.n	80008e8 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d11a      	bne.n	80008e2 <socket+0x102>
 80008ac:	f06f 0305 	mvn.w	r3, #5
 80008b0:	e0bb      	b.n	8000a2a <socket+0x24a>
   	      if(flag & SF_IGMP_VER2)
 80008b2:	78fb      	ldrb	r3, [r7, #3]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d006      	beq.n	80008ca <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80008bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db02      	blt.n	80008ca <socket+0xea>
 80008c4:	f06f 0305 	mvn.w	r3, #5
 80008c8:	e0af      	b.n	8000a2a <socket+0x24a>
      	      if(flag & SF_UNI_BLOCK)
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db04      	blt.n	80008e6 <socket+0x106>
 80008dc:	f06f 0305 	mvn.w	r3, #5
 80008e0:	e0a3      	b.n	8000a2a <socket+0x24a>
   	      break;
 80008e2:	bf00      	nop
 80008e4:	e000      	b.n	80008e8 <socket+0x108>
         break;
 80008e6:	bf00      	nop
      }
   }
   close(sn);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f8ac 	bl	8000a48 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	3301      	adds	r3, #1
 80008f6:	00d8      	lsls	r0, r3, #3
 80008f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008fc:	f023 030f 	bic.w	r3, r3, #15
 8000900:	b25a      	sxtb	r2, r3
 8000902:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	f7ff fd13 	bl	8000338 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d110      	bne.n	800093a <socket+0x15a>
   {
      port = sock_any_port++;
 8000918:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <socket+0x254>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	b291      	uxth	r1, r2
 8000920:	4a44      	ldr	r2, [pc, #272]	@ (8000a34 <socket+0x254>)
 8000922:	8011      	strh	r1, [r2, #0]
 8000924:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000926:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <socket+0x254>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800092e:	4293      	cmp	r3, r2
 8000930:	d103      	bne.n	800093a <socket+0x15a>
 8000932:	4b40      	ldr	r3, [pc, #256]	@ (8000a34 <socket+0x254>)
 8000934:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000938:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	3301      	adds	r3, #1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000946:	461a      	mov	r2, r3
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	b29b      	uxth	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f7ff fcf0 	bl	8000338 <WIZCHIP_WRITE>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	3301      	adds	r3, #1
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000964:	461a      	mov	r2, r3
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f7ff fce3 	bl	8000338 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	3301      	adds	r3, #1
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800097e:	2101      	movs	r1, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fcd9 	bl	8000338 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000986:	bf00      	nop
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	3301      	adds	r3, #1
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc83 	bl	80002a0 <WIZCHIP_READ>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1f3      	bne.n	8000988 <socket+0x1a8>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2201      	movs	r2, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <socket+0x258>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	4013      	ands	r3, r2
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <socket+0x258>)
 80009bc:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	f003 0201 	and.w	r2, r3, #1
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <socket+0x258>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <socket+0x258>)
 80009da:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2201      	movs	r2, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <socket+0x25c>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <socket+0x25c>)
 80009f8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <socket+0x260>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <socket+0x264>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000a0c:	bf00      	nop
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	3301      	adds	r3, #1
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fc40 	bl	80002a0 <WIZCHIP_READ>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f3      	beq.n	8000a0e <socket+0x22e>
   return (int8_t)sn;
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	@ 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000
 8000a38:	200000c0 	.word	0x200000c0
 8000a3c:	200000c2 	.word	0x200000c2
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	200000d4 	.word	0x200000d4

08000a48 <close>:

int8_t close(uint8_t sn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d902      	bls.n	8000a5e <close+0x16>
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	e055      	b.n	8000b0a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	3301      	adds	r3, #1
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc63 	bl	8000338 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8000a72:	bf00      	nop
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fc0d 	bl	80002a0 <WIZCHIP_READ>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f3      	bne.n	8000a74 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	3301      	adds	r3, #1
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a98:	211f      	movs	r1, #31
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fc4c 	bl	8000338 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <close+0xcc>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <close+0xcc>)
 8000abc:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <close+0xd0>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <close+0xd0>)
 8000ada:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <close+0xd4>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <close+0xd8>)
 8000aea:	2100      	movs	r1, #0
 8000aec:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8000aee:	bf00      	nop
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3301      	adds	r3, #1
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fbcf 	bl	80002a0 <WIZCHIP_READ>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f3      	bne.n	8000af0 <close+0xa8>
   return SOCK_OK;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000c0 	.word	0x200000c0
 8000b18:	200000c2 	.word	0x200000c2
 8000b1c:	200000c4 	.word	0x200000c4
 8000b20:	200000d4 	.word	0x200000d4

08000b24 <listen>:

int8_t listen(uint8_t sn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d902      	bls.n	8000b3a <listen+0x16>
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	e049      	b.n	8000bce <listen+0xaa>
   CHECK_TCPMODE(); 
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	3301      	adds	r3, #1
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fbac 	bl	80002a0 <WIZCHIP_READ>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d002      	beq.n	8000b58 <listen+0x34>
 8000b52:	f06f 0304 	mvn.w	r3, #4
 8000b56:	e03a      	b.n	8000bce <listen+0xaa>
   CHECK_SOCKINIT();
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb9b 	bl	80002a0 <WIZCHIP_READ>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b13      	cmp	r3, #19
 8000b6e:	d002      	beq.n	8000b76 <listen+0x52>
 8000b70:	f06f 0302 	mvn.w	r3, #2
 8000b74:	e02b      	b.n	8000bce <listen+0xaa>
   setSn_CR(sn,Sn_CR_LISTEN);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b82:	2102      	movs	r1, #2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fbd7 	bl	8000338 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000b8a:	bf00      	nop
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	3301      	adds	r3, #1
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb81 	bl	80002a0 <WIZCHIP_READ>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f3      	bne.n	8000b8c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000ba4:	e006      	b.n	8000bb4 <listen+0x90>
   {
      close(sn);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff4d 	bl	8000a48 <close>
      return SOCKERR_SOCKCLOSED;
 8000bae:	f06f 0303 	mvn.w	r3, #3
 8000bb2:	e00c      	b.n	8000bce <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	3301      	adds	r3, #1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb6d 	bl	80002a0 <WIZCHIP_READ>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b14      	cmp	r3, #20
 8000bca:	d1ec      	bne.n	8000ba6 <listen+0x82>
   }
   return SOCK_OK;
 8000bcc:	2301      	movs	r3, #1
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d902      	bls.n	8000bee <disconnect+0x16>
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	e06e      	b.n	8000ccc <disconnect+0xf4>
   CHECK_TCPMODE();
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb52 	bl	80002a0 <WIZCHIP_READ>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d002      	beq.n	8000c0c <disconnect+0x34>
 8000c06:	f06f 0304 	mvn.w	r3, #4
 8000c0a:	e05f      	b.n	8000ccc <disconnect+0xf4>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3301      	adds	r3, #1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fb41 	bl	80002a0 <WIZCHIP_READ>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d052      	beq.n	8000cca <disconnect+0xf2>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c30:	2108      	movs	r1, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb80 	bl	8000338 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8000c38:	bf00      	nop
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	3301      	adds	r3, #1
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb2a 	bl	80002a0 <WIZCHIP_READ>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f3      	bne.n	8000c3a <disconnect+0x62>
	   sock_is_sending &= ~(1<<sn);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2201      	movs	r2, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <disconnect+0xfc>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4013      	ands	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <disconnect+0xfc>)
 8000c6e:	801a      	strh	r2, [r3, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <disconnect+0x100>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	fa42 f303 	asr.w	r3, r2, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d016      	beq.n	8000cb2 <disconnect+0xda>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e021      	b.n	8000ccc <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb03 	bl	80002a0 <WIZCHIP_READ>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <disconnect+0xda>
         {
            close(sn);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fece 	bl	8000a48 <close>
            return SOCKERR_TIMEOUT;
 8000cac:	f06f 030c 	mvn.w	r3, #12
 8000cb0:	e00c      	b.n	8000ccc <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff faee 	bl	80002a0 <WIZCHIP_READ>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1de      	bne.n	8000c88 <disconnect+0xb0>
         }
      }
   }
   return SOCK_OK;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000c2 	.word	0x200000c2
 8000cd8:	200000c0 	.word	0x200000c0

08000cdc <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d902      	bls.n	8000d00 <send+0x24>
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	e138      	b.n	8000f72 <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	3301      	adds	r3, #1
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fac9 	bl	80002a0 <WIZCHIP_READ>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d002      	beq.n	8000d1e <send+0x42>
 8000d18:	f06f 0304 	mvn.w	r3, #4
 8000d1c:	e129      	b.n	8000f72 <send+0x296>
   CHECK_SOCKDATA();
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <send+0x4e>
 8000d24:	f06f 030d 	mvn.w	r3, #13
 8000d28:	e123      	b.n	8000f72 <send+0x296>
   tmp = getSn_SR(sn);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	3301      	adds	r3, #1
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fab2 	bl	80002a0 <WIZCHIP_READ>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b17      	cmp	r3, #23
 8000d44:	d005      	beq.n	8000d52 <send+0x76>
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b1c      	cmp	r3, #28
 8000d4a:	d002      	beq.n	8000d52 <send+0x76>
 8000d4c:	f06f 0306 	mvn.w	r3, #6
 8000d50:	e10f      	b.n	8000f72 <send+0x296>
   if( sock_is_sending & (1<<sn) )
 8000d52:	4b8a      	ldr	r3, [pc, #552]	@ (8000f7c <send+0x2a0>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	fa42 f303 	asr.w	r3, r2, r3
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d039      	beq.n	8000dda <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fa94 	bl	80002a0 <WIZCHIP_READ>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d019      	beq.n	8000dbe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3301      	adds	r3, #1
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d96:	2110      	movs	r1, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff facd 	bl	8000338 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2201      	movs	r2, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	4b73      	ldr	r3, [pc, #460]	@ (8000f7c <send+0x2a0>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4013      	ands	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b70      	ldr	r3, [pc, #448]	@ (8000f7c <send+0x2a0>)
 8000dba:	801a      	strh	r2, [r3, #0]
 8000dbc:	e00d      	b.n	8000dda <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <send+0xfa>
      {
         close(sn);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe3c 	bl	8000a48 <close>
         return SOCKERR_TIMEOUT;
 8000dd0:	f06f 030c 	mvn.w	r3, #12
 8000dd4:	e0cd      	b.n	8000f72 <send+0x296>
      }
      else return SOCK_BUSY;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e0cb      	b.n	8000f72 <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	3301      	adds	r3, #1
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa5a 	bl	80002a0 <WIZCHIP_READ>
 8000dec:	4603      	mov	r3, r0
 8000dee:	029b      	lsls	r3, r3, #10
 8000df0:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000df2:	88ba      	ldrh	r2, [r7, #4]
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d901      	bls.n	8000dfe <send+0x122>
 8000dfa:	89bb      	ldrh	r3, [r7, #12]
 8000dfc:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fba7 	bl	8000554 <getSn_TX_FSR>
 8000e06:	4603      	mov	r3, r0
 8000e08:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	3301      	adds	r3, #1
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fa42 	bl	80002a0 <WIZCHIP_READ>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b17      	cmp	r3, #23
 8000e24:	d00c      	beq.n	8000e40 <send+0x164>
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b1c      	cmp	r3, #28
 8000e2a:	d009      	beq.n	8000e40 <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d103      	bne.n	8000e3a <send+0x15e>
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe07 	bl	8000a48 <close>
         return SOCKERR_SOCKSTATUS;
 8000e3a:	f06f 0306 	mvn.w	r3, #6
 8000e3e:	e098      	b.n	8000f72 <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8000e40:	4b4f      	ldr	r3, [pc, #316]	@ (8000f80 <send+0x2a4>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	fa42 f303 	asr.w	r3, r2, r3
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <send+0x184>
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	89bb      	ldrh	r3, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d901      	bls.n	8000e60 <send+0x184>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e088      	b.n	8000f72 <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	89bb      	ldrh	r3, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d900      	bls.n	8000e6a <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8000e68:	e7c9      	b.n	8000dfe <send+0x122>
      if(len <= freesize) break;
 8000e6a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000e6c:	88ba      	ldrh	r2, [r7, #4]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc00 	bl	8000678 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 8000e78:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <send+0x2a0>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d04d      	beq.n	8000f28 <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8000e8c:	e034      	b.n	8000ef8 <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	3301      	adds	r3, #1
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fa00 	bl	80002a0 <WIZCHIP_READ>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b17      	cmp	r3, #23
 8000ea8:	d01a      	beq.n	8000ee0 <send+0x204>
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b1c      	cmp	r3, #28
 8000eae:	d017      	beq.n	8000ee0 <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00d      	beq.n	8000ed2 <send+0x1f6>
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	3301      	adds	r3, #1
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f9ec 	bl	80002a0 <WIZCHIP_READ>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <send+0x1fe>
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fdb7 	bl	8000a48 <close>
            return SOCKERR_SOCKSTATUS;
 8000eda:	f06f 0306 	mvn.w	r3, #6
 8000ede:	e048      	b.n	8000f72 <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <send+0x2a4>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <send+0x21c>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e03c      	b.n	8000f72 <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3301      	adds	r3, #1
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f9cb 	bl	80002a0 <WIZCHIP_READ>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0bc      	beq.n	8000e8e <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3301      	adds	r3, #1
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f20:	2110      	movs	r1, #16
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa08 	bl	8000338 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f34:	2120      	movs	r1, #32
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f9fe 	bl	8000338 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8000f3c:	bf00      	nop
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	3301      	adds	r3, #1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f9a8 	bl	80002a0 <WIZCHIP_READ>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f3      	bne.n	8000f3e <send+0x262>
   sock_is_sending |= (1<<sn);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <send+0x2a0>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <send+0x2a0>)
 8000f6e:	801a      	strh	r2, [r3, #0]
 
   return len;
 8000f70:	88bb      	ldrh	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000c2 	.word	0x200000c2
 8000f80:	200000c0 	.word	0x200000c0

08000f84 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d902      	bls.n	8000fa8 <recv+0x24>
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e098      	b.n	80010da <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	3301      	adds	r3, #1
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f975 	bl	80002a0 <WIZCHIP_READ>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d002      	beq.n	8000fc6 <recv+0x42>
 8000fc0:	f06f 0304 	mvn.w	r3, #4
 8000fc4:	e089      	b.n	80010da <recv+0x156>
   CHECK_SOCKDATA();
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <recv+0x4e>
 8000fcc:	f06f 030d 	mvn.w	r3, #13
 8000fd0:	e083      	b.n	80010da <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f95e 	bl	80002a0 <WIZCHIP_READ>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000fea:	89ba      	ldrh	r2, [r7, #12]
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d201      	bcs.n	8000ff6 <recv+0x72>
 8000ff2:	89bb      	ldrh	r3, [r7, #12]
 8000ff4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff faf4 	bl	80005e6 <getSn_RX_RSR>
 8000ffe:	4603      	mov	r3, r0
 8001000:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	3301      	adds	r3, #1
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f946 	bl	80002a0 <WIZCHIP_READ>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b17      	cmp	r3, #23
 800101c:	d026      	beq.n	800106c <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b1c      	cmp	r3, #28
 8001022:	d11c      	bne.n	800105e <recv+0xda>
         {
            if(recvsize != 0) break;
 8001024:	89bb      	ldrh	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d130      	bne.n	800108c <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa91 	bl	8000554 <getSn_TX_FSR>
 8001032:	4603      	mov	r3, r0
 8001034:	461c      	mov	r4, r3
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3301      	adds	r3, #1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f92c 	bl	80002a0 <WIZCHIP_READ>
 8001048:	4603      	mov	r3, r0
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	429c      	cmp	r4, r3
 800104e:	d10d      	bne.n	800106c <recv+0xe8>
            {
               close(sn);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fcf8 	bl	8000a48 <close>
               return SOCKERR_SOCKSTATUS;
 8001058:	f06f 0306 	mvn.w	r3, #6
 800105c:	e03d      	b.n	80010da <recv+0x156>
            }
         }
         else
         {
            close(sn);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fcf1 	bl	8000a48 <close>
            return SOCKERR_SOCKSTATUS;
 8001066:	f06f 0306 	mvn.w	r3, #6
 800106a:	e036      	b.n	80010da <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <recv+0x160>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	fa42 f303 	asr.w	r3, r2, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <recv+0x100>
 8001080:	2300      	movs	r3, #0
 8001082:	e02a      	b.n	80010da <recv+0x156>
      if(recvsize != 0) break;
 8001084:	89bb      	ldrh	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800108a:	e7b4      	b.n	8000ff6 <recv+0x72>
            if(recvsize != 0) break;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <recv+0x10e>
      if(recvsize != 0) break;
 8001090:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8001092:	89ba      	ldrh	r2, [r7, #12]
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d201      	bcs.n	800109e <recv+0x11a>
 800109a:	89bb      	ldrh	r3, [r7, #12]
 800109c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 800109e:	88ba      	ldrh	r2, [r7, #4]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb41 	bl	800072c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	3301      	adds	r3, #1
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010b6:	2140      	movs	r1, #64	@ 0x40
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f93d 	bl	8000338 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 80010be:	bf00      	nop
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	3301      	adds	r3, #1
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f8e7 	bl	80002a0 <WIZCHIP_READ>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f3      	bne.n	80010c0 <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80010d8:	88bb      	ldrh	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000c0 	.word	0x200000c0

080010e8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
 800115c:	2300      	movs	r3, #0
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	81fb      	strh	r3, [r7, #14]
 8001190:	e00a      	b.n	80011a8 <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <wizchip_spi_readburst+0x3c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	687c      	ldr	r4, [r7, #4]
 8001198:	1c62      	adds	r2, r4, #1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	3301      	adds	r3, #1
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	89fa      	ldrh	r2, [r7, #14]
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3f0      	bcc.n	8001192 <wizchip_spi_readburst+0x12>
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000004 	.word	0x20000004

080011c0 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	81fb      	strh	r3, [r7, #14]
 80011d0:	e00a      	b.n	80011e8 <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <wizchip_spi_writeburst+0x3c>)
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1c59      	adds	r1, r3, #1
 80011da:	6079      	str	r1, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	3301      	adds	r3, #1
 80011e6:	81fb      	strh	r3, [r7, #14]
 80011e8:	89fa      	ldrh	r2, [r7, #14]
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3f0      	bcc.n	80011d2 <wizchip_spi_writeburst+0x12>
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000004 	.word	0x20000004

08001200 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <reg_wizchip_cs_cbfunc+0x16>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d106      	bne.n	8001224 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <reg_wizchip_cs_cbfunc+0x40>)
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <reg_wizchip_cs_cbfunc+0x44>)
 800121a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <reg_wizchip_cs_cbfunc+0x40>)
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <reg_wizchip_cs_cbfunc+0x48>)
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	e006      	b.n	8001232 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <reg_wizchip_cs_cbfunc+0x40>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <reg_wizchip_cs_cbfunc+0x40>)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6193      	str	r3, [r2, #24]
   }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000004 	.word	0x20000004
 8001244:	08001105 	.word	0x08001105
 8001248:	08001113 	.word	0x08001113

0800124c <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001256:	bf00      	nop
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <reg_wizchip_spi_cbfunc+0x4c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <reg_wizchip_spi_cbfunc+0x24>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <reg_wizchip_spi_cbfunc+0x4c>)
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <reg_wizchip_spi_cbfunc+0x50>)
 8001274:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <reg_wizchip_spi_cbfunc+0x4c>)
 8001278:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <reg_wizchip_spi_cbfunc+0x54>)
 800127a:	621a      	str	r2, [r3, #32]
 800127c:	e006      	b.n	800128c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800127e:	4a06      	ldr	r2, [pc, #24]	@ (8001298 <reg_wizchip_spi_cbfunc+0x4c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <reg_wizchip_spi_cbfunc+0x4c>)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6213      	str	r3, [r2, #32]
   }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20000004 	.word	0x20000004
 800129c:	08001159 	.word	0x08001159
 80012a0:	08001169 	.word	0x08001169

080012a4 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80012ae:	bf00      	nop
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <reg_wizchip_spiburst_cbfunc+0x24>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d106      	bne.n	80012d6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <reg_wizchip_spiburst_cbfunc+0x50>)
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012d0:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <reg_wizchip_spiburst_cbfunc+0x54>)
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80012d4:	e006      	b.n	80012e4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80012d6:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000004 	.word	0x20000004
 80012f4:	08001181 	.word	0x08001181
 80012f8:	080011c1 	.word	0x080011c1

080012fc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2206      	movs	r2, #6
 8001306:	4619      	mov	r1, r3
 8001308:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800130c:	f7ff f862 	bl	80003d4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2204      	movs	r2, #4
 8001316:	4619      	mov	r1, r3
 8001318:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800131c:	f7ff f85a 	bl	80003d4 <WIZCHIP_READ_BUF>
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2204      	movs	r2, #4
 8001326:	4619      	mov	r1, r3
 8001328:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800132c:	f7ff f852 	bl	80003d4 <WIZCHIP_READ_BUF>
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2204      	movs	r2, #4
 8001336:	4619      	mov	r1, r3
 8001338:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800133c:	f7ff f84a 	bl	80003d4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	2000      	movs	r0, #0
 8001344:	f7fe fff8 	bl	8000338 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001348:	2000      	movs	r0, #0
 800134a:	f7fe ffa9 	bl	80002a0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2206      	movs	r2, #6
 8001352:	4619      	mov	r1, r3
 8001354:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001358:	f7ff f89c 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2204      	movs	r2, #4
 8001362:	4619      	mov	r1, r3
 8001364:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001368:	f7ff f894 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2204      	movs	r2, #4
 8001372:	4619      	mov	r1, r3
 8001374:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001378:	f7ff f88c 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001388:	f7ff f884 	bl	8000494 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80013a2:	f7ff ffab 	bl	80012fc <wizchip_sw_reset>
   if(txsize)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d03b      	beq.n	8001424 <wizchip_init+0x90>
   {
      tmp = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e015      	b.n	80013e2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80013c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	dd02      	ble.n	80013d6 <wizchip_init+0x42>
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	e066      	b.n	80014a4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	2b07      	cmp	r3, #7
 80013e8:	dde5      	ble.n	80013b6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e015      	b.n	800141c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3301      	adds	r3, #1
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80013fe:	4618      	mov	r0, r3
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	f7fe ff94 	bl	8000338 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	2b07      	cmp	r3, #7
 8001422:	dde5      	ble.n	80013f0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d03b      	beq.n	80014a2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e015      	b.n	8001460 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800144a:	2b10      	cmp	r3, #16
 800144c:	dd02      	ble.n	8001454 <wizchip_init+0xc0>
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e027      	b.n	80014a4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3301      	adds	r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b07      	cmp	r3, #7
 8001466:	dde5      	ble.n	8001434 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e015      	b.n	800149a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	3301      	adds	r3, #1
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800147c:	4618      	mov	r0, r3
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f7fe ff55 	bl	8000338 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3301      	adds	r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	dde5      	ble.n	800146e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2206      	movs	r2, #6
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014be:	f7fe ffe9 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	330e      	adds	r3, #14
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014ce:	f7fe ffe1 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	330a      	adds	r3, #10
 80014d6:	2204      	movs	r2, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80014de:	f7fe ffd9 	bl	8000494 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3306      	adds	r3, #6
 80014e6:	2204      	movs	r2, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80014ee:	f7fe ffd1 	bl	8000494 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7c9a      	ldrb	r2, [r3, #18]
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <wizchip_setnetinfo+0x78>)
 80014f8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7cda      	ldrb	r2, [r3, #19]
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <wizchip_setnetinfo+0x78>)
 8001500:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7d1a      	ldrb	r2, [r3, #20]
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <wizchip_setnetinfo+0x78>)
 8001508:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7d5a      	ldrb	r2, [r3, #21]
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <wizchip_setnetinfo+0x78>)
 8001510:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7d9a      	ldrb	r2, [r3, #22]
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <wizchip_setnetinfo+0x7c>)
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000dc 	.word	0x200000dc
 8001528:	200000e0 	.word	0x200000e0

0800152c <myPrintf>:

uartStream uart2Stream;


void myPrintf(/*uint8_t debugLevel,*/ const char *format, ...)
{
 800152c:	b40f      	push	{r0, r1, r2, r3}
 800152e:	b580      	push	{r7, lr}
 8001530:	b0a4      	sub	sp, #144	@ 0x90
 8001532:	af00      	add	r7, sp, #0
	//	if (debugLevel <= DEBUG_LEVEL)
	{
		char buffer[128];
		va_list args;
		va_start(args, format);
 8001534:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		vsnprintf(buffer, sizeof(buffer), format, args);
 800153c:	1d38      	adds	r0, r7, #4
 800153e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001542:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	f003 fe50 	bl	80051ec <vsniprintf>
		va_end(args);

		// Ensure the buffer does not overflow
		size_t length = strlen(buffer);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe48 	bl	80001e4 <strlen>
 8001554:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		size_t index = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		while (length)
 800155e:	e01a      	b.n	8001596 <myPrintf+0x6a>
		{
			uart2Stream.txBuffer[uart2Stream.txFillIndex++] = buffer[index++];
 8001560:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <myPrintf+0xc0>)
 800156c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8001570:	1c51      	adds	r1, r2, #1
 8001572:	b2c8      	uxtb	r0, r1
 8001574:	491d      	ldr	r1, [pc, #116]	@ (80015ec <myPrintf+0xc0>)
 8001576:	f881 0202 	strb.w	r0, [r1, #514]	@ 0x202
 800157a:	4611      	mov	r1, r2
 800157c:	3390      	adds	r3, #144	@ 0x90
 800157e:	443b      	add	r3, r7
 8001580:	f813 2c8c 	ldrb.w	r2, [r3, #-140]
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <myPrintf+0xc0>)
 8001586:	440b      	add	r3, r1
 8001588:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			if (uart2Stream.txFillIndex >= RX_BUFFER_SIZE)
			{
				uart2Stream.txFillIndex = 0;  // Reset index on overflow
			}
			length--;
 800158c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001590:	3b01      	subs	r3, #1
 8001592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		while (length)
 8001596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1e0      	bne.n	8001560 <myPrintf+0x34>
		}
	}

	while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 800159e:	e014      	b.n	80015ca <myPrintf+0x9e>
	{
		// Calculate the number of bytes to send

		// Send all available data from txBuffer
		HAL_UART_Transmit(&huart2, &uart2Stream.txBuffer[uart2Stream.txReadIndex], 1, HAL_MAX_DELAY);
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <myPrintf+0xc0>)
 80015a2:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80015a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <myPrintf+0xc0>)
 80015ac:	1899      	adds	r1, r3, r2
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2201      	movs	r2, #1
 80015b4:	480e      	ldr	r0, [pc, #56]	@ (80015f0 <myPrintf+0xc4>)
 80015b6:	f003 f961 	bl	800487c <HAL_UART_Transmit>
		uart2Stream.txReadIndex++;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <myPrintf+0xc0>)
 80015bc:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <myPrintf+0xc0>)
 80015c6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
	while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <myPrintf+0xc0>)
 80015cc:	f893 2202 	ldrb.w	r2, [r3, #514]	@ 0x202
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <myPrintf+0xc0>)
 80015d2:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d1e2      	bne.n	80015a0 <myPrintf+0x74>
		if (uart2Stream.txReadIndex >= RX_BUFFER_SIZE)
		{
			uart2Stream.txReadIndex = 0;  // Reset index on overflow
		}
	}
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3790      	adds	r7, #144	@ 0x90
 80015e0:	46bd      	mov	sp, r7
 80015e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015e6:	b004      	add	sp, #16
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200001d0 	.word	0x200001d0
 80015f0:	20000148 	.word	0x20000148

080015f4 <wizchipSelect>:


void wizchipSelect(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	//	myPrintf("wizchipSelect\n");
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001600:	f000 ff88 	bl	8002514 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <wizchipUnselect>:

void wizchipUnselect(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	//	myPrintf("wizchipUnselect\n");
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f000 ff7e 	bl	8002514 <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <wizchipReadBurst>:

void wizchipReadBurst(uint8_t* buff, uint16_t len) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
	//	myPrintf("wizchipReadBurst\n");
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4803      	ldr	r0, [pc, #12]	@ (8001640 <wizchipReadBurst+0x24>)
 8001632:	f002 fbbf 	bl	8003db4 <HAL_SPI_Receive>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000e4 	.word	0x200000e4

08001644 <wizchipWriteBurst>:

void wizchipWriteBurst(uint8_t* buff, uint16_t len) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
	//	myPrintf("wizchipWriteBurst\n");
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <wizchipWriteBurst+0x24>)
 800165a:	f002 fa36 	bl	8003aca <HAL_SPI_Transmit>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000e4 	.word	0x200000e4

0800166c <wizchipReadByte>:

uint8_t wizchipReadByte(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	//	myPrintf("wizchipReadByte\n");
	uint8_t byte;
	wizchipReadBurst(&byte, sizeof(byte));
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	2101      	movs	r1, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ffd0 	bl	800161c <wizchipReadBurst>
	return byte;
 800167c:	79fb      	ldrb	r3, [r7, #7]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <wizchipWriteByte>:

void wizchipWriteByte(uint8_t byte) {
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
	//	myPrintf("wizchipWriteByte\n");
	wizchipWriteBurst(&byte, sizeof(byte));
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffd5 	bl	8001644 <wizchipWriteBurst>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <wizChipInit>:

void wizChipInit()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	reg_wizchip_cs_cbfunc(wizchipSelect, wizchipUnselect);
 80016aa:	490f      	ldr	r1, [pc, #60]	@ (80016e8 <wizChipInit+0x44>)
 80016ac:	480f      	ldr	r0, [pc, #60]	@ (80016ec <wizChipInit+0x48>)
 80016ae:	f7ff fda7 	bl	8001200 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchipReadByte, wizchipWriteByte);
 80016b2:	490f      	ldr	r1, [pc, #60]	@ (80016f0 <wizChipInit+0x4c>)
 80016b4:	480f      	ldr	r0, [pc, #60]	@ (80016f4 <wizChipInit+0x50>)
 80016b6:	f7ff fdc9 	bl	800124c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchipReadBurst, wizchipWriteBurst);
 80016ba:	490f      	ldr	r1, [pc, #60]	@ (80016f8 <wizChipInit+0x54>)
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <wizChipInit+0x58>)
 80016be:	f7ff fdf1 	bl	80012a4 <reg_wizchip_spiburst_cbfunc>

	myPrintf("wiznet functions registered\n");
 80016c2:	480f      	ldr	r0, [pc, #60]	@ (8001700 <wizChipInit+0x5c>)
 80016c4:	f7ff ff32 	bl	800152c <myPrintf>

	/*The W5500 has its own internal 32KB RAM for network data buffering
	 *(16 KB for RX, 16 KB for TX, or You can split each 16 KB block 
	 * among the 8 sockets as needed).
	 */
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};  // 2KB assigned for Rx & TX for each
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <wizChipInit+0x60>)
 80016ca:	463b      	mov	r3, r7
 80016cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d0:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80016d4:	463a      	mov	r2, r7
 80016d6:	463b      	mov	r3, r7
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe5a 	bl	8001394 <wizchip_init>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	08001609 	.word	0x08001609
 80016ec:	080015f5 	.word	0x080015f5
 80016f0:	08001687 	.word	0x08001687
 80016f4:	0800166d 	.word	0x0800166d
 80016f8:	08001645 	.word	0x08001645
 80016fc:	0800161d 	.word	0x0800161d
 8001700:	080059c0 	.word	0x080059c0
 8001704:	080059e0 	.word	0x080059e0

08001708 <checkLinkStatus>:


uint8_t checkLinkStatus(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t phycfgr = getPHYCFGR();
 800170e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001712:	f7fe fdc5 	bl	80002a0 <WIZCHIP_READ>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	if (phycfgr & PHYCFGR_LNK_ON) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <checkLinkStatus+0x20>
		return 1; // Link is up
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <checkLinkStatus+0x22>
	} else {
		return 0; // Link is down
 8001728:	2300      	movs	r3, #0
	}
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b0b0      	sub	sp, #192	@ 0xc0
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 fc09 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f9ab 	bl	8001a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f000 fa53 	bl	8001bec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001746:	f000 fa21 	bl	8001b8c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800174a:	f000 f9e1 	bl	8001b10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  wizChipInit();
 800174e:	f7ff ffa9 	bl	80016a4 <wizChipInit>

  wizchip_setnetinfo(&net_info);
 8001752:	48bc      	ldr	r0, [pc, #752]	@ (8001a44 <main+0x310>)
 8001754:	f7ff feaa 	bl	80014ac <wizchip_setnetinfo>

	while (checkLinkStatus() == 0)
 8001758:	e006      	b.n	8001768 <main+0x34>
	{
		myPrintf("Waiting for link to be established...\n");
 800175a:	48bb      	ldr	r0, [pc, #748]	@ (8001a48 <main+0x314>)
 800175c:	f7ff fee6 	bl	800152c <myPrintf>
		HAL_Delay(1000); // Wait for 1 second before checking again
 8001760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001764:	f000 fc5a 	bl	800201c <HAL_Delay>
	while (checkLinkStatus() == 0)
 8001768:	f7ff ffce 	bl	8001708 <checkLinkStatus>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f3      	beq.n	800175a <main+0x26>
	}

	myPrintf("Link established, initializing W5500...\n");
 8001772:	48b6      	ldr	r0, [pc, #728]	@ (8001a4c <main+0x318>)
 8001774:	f7ff feda 	bl	800152c <myPrintf>
	 * @param 5000 :  The port number to bind the socket. For TCP, gave random port no 5000.
	 * @param SF_TCP_NODELAY :  Socket flag options. This controls socket behavior.
	 * @return :    Returns the socket descriptor (integer >= 0) on success, or a negative value on error.
	 */

	int tcp_sock = socket(0, Sn_MR_TCP, TCP_PORT, SF_TCP_NODELAY);
 8001778:	2320      	movs	r3, #32
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	2101      	movs	r1, #1
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff f82d 	bl	80007e0 <socket>
 8001786:	4603      	mov	r3, r0
 8001788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (tcp_sock != 0)
 800178c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <main+0x68>
	{
		myPrintf("Failed to create TCP socket\r\n");
 8001794:	48ae      	ldr	r0, [pc, #696]	@ (8001a50 <main+0x31c>)
 8001796:	f7ff fec9 	bl	800152c <myPrintf>
 800179a:	e01e      	b.n	80017da <main+0xa6>
	}
	else
	{
		int8_t ret = listen(tcp_sock);
 800179c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f9be 	bl	8000b24 <listen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		if (ret != SOCK_OK)
 80017ae:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d00c      	beq.n	80017d0 <main+0x9c>
		{
			myPrintf("Failed to listen on TCP socket: %d\r\n", ret);
 80017b6:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 80017ba:	4619      	mov	r1, r3
 80017bc:	48a5      	ldr	r0, [pc, #660]	@ (8001a54 <main+0x320>)
 80017be:	f7ff feb5 	bl	800152c <myPrintf>
			close(tcp_sock);
 80017c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f93d 	bl	8000a48 <close>
 80017ce:	e004      	b.n	80017da <main+0xa6>
		}
		else
		{
			myPrintf("TCP server listening on port %d\r\n",TCP_PORT);
 80017d0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80017d4:	48a0      	ldr	r0, [pc, #640]	@ (8001a58 <main+0x324>)
 80017d6:	f7ff fea9 	bl	800152c <myPrintf>
		}
	}


	uint8_t connectionStatus = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (checkLinkStatus() == 0)  // checking if link disconnected
 80017e0:	f7ff ff92 	bl	8001708 <checkLinkStatus>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d13f      	bne.n	800186a <main+0x136>
		{
			if (connectionStatus != 0)  // connectionStatus is flag to keep track connection
 80017ea:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <main+0xe0>
			{
				myPrintf("Ethernet link lost! Closing TCP connection.\r\n");
 80017f2:	489a      	ldr	r0, [pc, #616]	@ (8001a5c <main+0x328>)
 80017f4:	f7ff fe9a 	bl	800152c <myPrintf>
				connectionStatus = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				disconnect(0); // socket number 0 is disconnected
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff f9ea 	bl	8000bd8 <disconnect>
			}
			while (checkLinkStatus() == 0)
 8001804:	e006      	b.n	8001814 <main+0xe0>
			{
				myPrintf("Waiting for link to be established...\n");
 8001806:	4890      	ldr	r0, [pc, #576]	@ (8001a48 <main+0x314>)
 8001808:	f7ff fe90 	bl	800152c <myPrintf>
				HAL_Delay(1000);
 800180c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001810:	f000 fc04 	bl	800201c <HAL_Delay>
			while (checkLinkStatus() == 0)
 8001814:	f7ff ff78 	bl	8001708 <checkLinkStatus>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f3      	beq.n	8001806 <main+0xd2>
			}

			myPrintf("Ethernet link re-established.\n");
 800181e:	4890      	ldr	r0, [pc, #576]	@ (8001a60 <main+0x32c>)
 8001820:	f7ff fe84 	bl	800152c <myPrintf>

			// Re-create the socket after link is up/established
			int tcp_sock = socket(0, Sn_MR_TCP, TCP_PORT, SF_TCP_NODELAY);
 8001824:	2320      	movs	r3, #32
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	2101      	movs	r1, #1
 800182c:	2000      	movs	r0, #0
 800182e:	f7fe ffd7 	bl	80007e0 <socket>
 8001832:	4603      	mov	r3, r0
 8001834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

			if (tcp_sock == 0)
 8001838:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 80ff 	bne.w	8001a40 <main+0x30c>
			{
				int8_t ret = listen(tcp_sock);
 8001842:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f96b 	bl	8000b24 <listen>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
				if (ret == SOCK_OK)
 8001854:	f997 309b 	ldrsb.w	r3, [r7, #155]	@ 0x9b
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 80f1 	bne.w	8001a40 <main+0x30c>
				{
					myPrintf("TCP server re-listening on port %d\r\n", TCP_PORT);
 800185e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001862:	4880      	ldr	r0, [pc, #512]	@ (8001a64 <main+0x330>)
 8001864:	f7ff fe62 	bl	800152c <myPrintf>
				}
			}
			continue; // Skip rest of loop until link is up
 8001868:	e0ea      	b.n	8001a40 <main+0x30c>
		}


		// This is part is for TCP Client connection
		// Check TCP socket connection status
		uint8_t sock_status = getSn_SR(0); //non blocking call
 800186a:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800186e:	f7fe fd17 	bl	80002a0 <WIZCHIP_READ>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
		if (sock_status == SOCK_ESTABLISHED)
 8001878:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800187c:	2b17      	cmp	r3, #23
 800187e:	f040 809b 	bne.w	80019b8 <main+0x284>
		{
			if(connectionStatus == 0)
 8001882:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001886:	2b00      	cmp	r3, #0
 8001888:	d120      	bne.n	80018cc <main+0x198>
			{
				connectionStatus = 1; // Set connection status to connected
 800188a:	2301      	movs	r3, #1
 800188c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				myPrintf("TCP client connected\r\n");
 8001890:	4875      	ldr	r0, [pc, #468]	@ (8001a68 <main+0x334>)
 8001892:	f7ff fe4b 	bl	800152c <myPrintf>
				const char msgOnConnection[] = "Welcome to DevHeads\n";
 8001896:	4b75      	ldr	r3, [pc, #468]	@ (8001a6c <main+0x338>)
 8001898:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800189c:	461d      	mov	r5, r3
 800189e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018a6:	6020      	str	r0, [r4, #0]
 80018a8:	3404      	adds	r4, #4
 80018aa:	7021      	strb	r1, [r4, #0]
				int32_t sent_len = send(0, msgOnConnection, strlen(msgOnConnection));
 80018ac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80018b0:	2214      	movs	r2, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fa11 	bl	8000cdc <send>
 80018ba:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
				if (sent_len != strlen(msgOnConnection)) {
 80018be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018c2:	2b14      	cmp	r3, #20
 80018c4:	d002      	beq.n	80018cc <main+0x198>
					myPrintf("Failed to send data back to client\r\n");
 80018c6:	486a      	ldr	r0, [pc, #424]	@ (8001a70 <main+0x33c>)
 80018c8:	f7ff fe30 	bl	800152c <myPrintf>
				}
			}

			if(connectionStatus == 1)
 80018cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d185      	bne.n	80017e0 <main+0xac>
			{
				uint8_t tcp_rx_buf[64]={0};
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fc94 	bl	8005208 <memset>
				uint8_t tcp_tx_buf[64]={0};
 80018e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018e4:	2240      	movs	r2, #64	@ 0x40
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fc8d 	bl	8005208 <memset>
				int32_t recv_len = recv(0, tcp_rx_buf, sizeof(tcp_rx_buf)); //blocking call
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2240      	movs	r2, #64	@ 0x40
 80018f2:	4619      	mov	r1, r3
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fb45 	bl	8000f84 <recv>
 80018fa:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				if (recv_len > 0)
 80018fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f77f af6c 	ble.w	80017e0 <main+0xac>
				{
					myPrintf("Received %ld bytes from TCP client\r\n", recv_len);
 8001908:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800190c:	4859      	ldr	r0, [pc, #356]	@ (8001a74 <main+0x340>)
 800190e:	f7ff fe0d 	bl	800152c <myPrintf>
					myPrintf("data received =%s\n", tcp_rx_buf);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4858      	ldr	r0, [pc, #352]	@ (8001a78 <main+0x344>)
 8001918:	f7ff fe08 	bl	800152c <myPrintf>
					tcp_rx_buf[recv_len] = '\0';
 800191c:	1d3a      	adds	r2, r7, #4
 800191e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

					if(strcmp((char*)tcp_rx_buf,"ON") == 0)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4954      	ldr	r1, [pc, #336]	@ (8001a7c <main+0x348>)
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc4f 	bl	80001d0 <strcmp>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10e      	bne.n	8001956 <main+0x222>
					{
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Turn on LED
 8001938:	2201      	movs	r2, #1
 800193a:	2101      	movs	r1, #1
 800193c:	4850      	ldr	r0, [pc, #320]	@ (8001a80 <main+0x34c>)
 800193e:	f000 fde9 	bl	8002514 <HAL_GPIO_WritePin>
						// Echo back the received data (for testing)
						strcpy((char *)tcp_tx_buf, "\nLED IS ON");
 8001942:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001946:	4a4f      	ldr	r2, [pc, #316]	@ (8001a84 <main+0x350>)
 8001948:	ca07      	ldmia	r2, {r0, r1, r2}
 800194a:	c303      	stmia	r3!, {r0, r1}
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	3302      	adds	r3, #2
 8001950:	0c12      	lsrs	r2, r2, #16
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	e012      	b.n	800197c <main+0x248>
					}
					else if(strcmp((char*)tcp_rx_buf, "OFF") == 0)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	494b      	ldr	r1, [pc, #300]	@ (8001a88 <main+0x354>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fc38 	bl	80001d0 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <main+0x248>
					{
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Turn off LED
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	4845      	ldr	r0, [pc, #276]	@ (8001a80 <main+0x34c>)
 800196c:	f000 fdd2 	bl	8002514 <HAL_GPIO_WritePin>
						// Echo back the received data (for testing)
						strcpy((char *)tcp_tx_buf, "\nLED IS OFF");
 8001970:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001974:	4a45      	ldr	r2, [pc, #276]	@ (8001a8c <main+0x358>)
 8001976:	ca07      	ldmia	r2, {r0, r1, r2}
 8001978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					}

					int32_t sent_len = send(0, tcp_tx_buf, strlen(tcp_tx_buf));
 800197c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc2f 	bl	80001e4 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800198e:	4619      	mov	r1, r3
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff f9a3 	bl	8000cdc <send>
 8001996:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (sent_len != strlen(tcp_tx_buf)) {
 800199a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fc20 	bl	80001e4 <strlen>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f43f af18 	beq.w	80017e0 <main+0xac>
						myPrintf("Failed to send data back to client\r\n");
 80019b0:	482f      	ldr	r0, [pc, #188]	@ (8001a70 <main+0x33c>)
 80019b2:	f7ff fdbb 	bl	800152c <myPrintf>
 80019b6:	e713      	b.n	80017e0 <main+0xac>
					}
				}
			}
		}
		else if (sock_status == SOCK_CLOSE_WAIT)
 80019b8:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80019bc:	2b1c      	cmp	r3, #28
 80019be:	d116      	bne.n	80019ee <main+0x2ba>
		{
			connectionStatus = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			myPrintf("TCP client disconnected\r\n");
 80019c6:	4832      	ldr	r0, [pc, #200]	@ (8001a90 <main+0x35c>)
 80019c8:	f7ff fdb0 	bl	800152c <myPrintf>
			disconnect(0);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff f903 	bl	8000bd8 <disconnect>

			while (checkLinkStatus() == 0)
 80019d2:	e006      	b.n	80019e2 <main+0x2ae>
			{
				myPrintf("Waiting for link to be established...\n");
 80019d4:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <main+0x314>)
 80019d6:	f7ff fda9 	bl	800152c <myPrintf>
				HAL_Delay(1000); // Wait for 1 second before checking again
 80019da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019de:	f000 fb1d 	bl	800201c <HAL_Delay>
			while (checkLinkStatus() == 0)
 80019e2:	f7ff fe91 	bl	8001708 <checkLinkStatus>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f3      	beq.n	80019d4 <main+0x2a0>
 80019ec:	e6f8      	b.n	80017e0 <main+0xac>
			}

		}
		else if (sock_status == SOCK_CLOSED)
 80019ee:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f aef4 	bne.w	80017e0 <main+0xac>
		{
			// Re-listen if socket closed
			connectionStatus = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			int tcp_sock = socket(0, Sn_MR_TCP, TCP_PORT, SF_TCP_NODELAY);
 80019fe:	2320      	movs	r3, #32
 8001a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a04:	2101      	movs	r1, #1
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7fe feea 	bl	80007e0 <socket>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			if (tcp_sock == 0)
 8001a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f47f aee2 	bne.w	80017e0 <main+0xac>
			{
				int8_t ret = listen(tcp_sock);
 8001a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f87e 	bl	8000b24 <listen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
				if (ret == SOCK_OK)
 8001a2e:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f47f aed4 	bne.w	80017e0 <main+0xac>
				{
					myPrintf("TCP server re-listening on port 5000\r\n");
 8001a38:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <main+0x360>)
 8001a3a:	f7ff fd77 	bl	800152c <myPrintf>
 8001a3e:	e6cf      	b.n	80017e0 <main+0xac>
			continue; // Skip rest of loop until link is up
 8001a40:	bf00      	nop
	{
 8001a42:	e6cd      	b.n	80017e0 <main+0xac>
 8001a44:	20000030 	.word	0x20000030
 8001a48:	080059e8 	.word	0x080059e8
 8001a4c:	08005a10 	.word	0x08005a10
 8001a50:	08005a3c 	.word	0x08005a3c
 8001a54:	08005a5c 	.word	0x08005a5c
 8001a58:	08005a84 	.word	0x08005a84
 8001a5c:	08005aa8 	.word	0x08005aa8
 8001a60:	08005ad8 	.word	0x08005ad8
 8001a64:	08005af8 	.word	0x08005af8
 8001a68:	08005b20 	.word	0x08005b20
 8001a6c:	08005c00 	.word	0x08005c00
 8001a70:	08005b38 	.word	0x08005b38
 8001a74:	08005b60 	.word	0x08005b60
 8001a78:	08005b88 	.word	0x08005b88
 8001a7c:	08005b9c 	.word	0x08005b9c
 8001a80:	48000400 	.word	0x48000400
 8001a84:	08005ba0 	.word	0x08005ba0
 8001a88:	08005bac 	.word	0x08005bac
 8001a8c:	08005bb0 	.word	0x08005bb0
 8001a90:	08005bbc 	.word	0x08005bbc
 8001a94:	08005bd8 	.word	0x08005bd8

08001a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b090      	sub	sp, #64	@ 0x40
 8001a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	2228      	movs	r2, #40	@ 0x28
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fbae 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aca:	f107 0318 	add.w	r3, r7, #24
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd38 	bl	8002544 <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001ada:	f000 f8e7 	bl	8001cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fd32 	bl	8003560 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b02:	f000 f8d3 	bl	8001cac <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3740      	adds	r7, #64	@ 0x40
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <MX_SPI1_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b5e:	2207      	movs	r2, #7
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_SPI1_Init+0x74>)
 8001b70:	f001 ff08 	bl	8003984 <HAL_SPI_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f000 f897 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200000e4 	.word	0x200000e4
 8001b88:	40013000 	.word	0x40013000

08001b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <MX_USART2_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bd0:	f002 fe06 	bl	80047e0 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f000 f867 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000148 	.word	0x20000148
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2110      	movs	r1, #16
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c52:	f000 fc5f 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4813      	ldr	r0, [pc, #76]	@ (8001ca8 <MX_GPIO_Init+0xbc>)
 8001c5c:	f000 fc5a 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c60:	2310      	movs	r3, #16
 8001c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f000 fad9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <MX_GPIO_Init+0xbc>)
 8001c96:	f000 facb 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000400 	.word	0x48000400

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <Error_Handler+0x8>

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_MspInit+0x44>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cfc <HAL_MspInit+0x44>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6193      	str	r3, [r2, #24]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_MspInit+0x44>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_MspInit+0x44>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_MspInit+0x44>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_MspInit+0x44>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a17      	ldr	r2, [pc, #92]	@ (8001d7c <HAL_SPI_MspInit+0x7c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d128      	bne.n	8001d74 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d44:	6153      	str	r3, [r2, #20]
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_SPI_MspInit+0x80>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d52:	23e0      	movs	r3, #224	@ 0xe0
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d62:	2305      	movs	r3, #5
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d70:	f000 fa5e 	bl	8002230 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d129      	bne.n	8001dfa <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da6:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001dd6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de8:	2307      	movs	r3, #7
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df6:	f000 fa1b 	bl	8002230 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	@ 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40004400 	.word	0x40004400
 8001e08:	40021000 	.word	0x40021000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 f8bb 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 f9cc 	bl	8005238 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20003000 	.word	0x20003000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	200003dc 	.word	0x200003dc
 8001ed4:	20000530 	.word	0x20000530

08001ed8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff ffea 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f003 f98b 	bl	8005244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7ff fc01 	bl	8001734 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f34:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001f40:	08005c94 	.word	0x08005c94
  ldr r2, =_sbss
 8001f44:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001f48:	2000052c 	.word	0x2000052c

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_Init+0x28>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_Init+0x28>)
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f931 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fea4 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f93b 	bl	8002216 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 f911 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000048 	.word	0x20000048
 8001fd4:	20000050 	.word	0x20000050
 8001fd8:	2000004c 	.word	0x2000004c

08001fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000050 	.word	0x20000050
 8002000:	200003e0 	.word	0x200003e0

08002004 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;  
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200003e0 	.word	0x200003e0

0800201c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000050 	.word	0x20000050

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff47 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff5c 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffb0 	bl	8002184 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e14e      	b.n	80024de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8140 	beq.w	80024d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d005      	beq.n	8002270 <HAL_GPIO_Init+0x40>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d130      	bne.n	80022d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a6:	2201      	movs	r2, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0201 	and.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d017      	beq.n	800230e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d123      	bne.n	8002362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	6939      	ldr	r1, [r7, #16]
 800235e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0203 	and.w	r2, r3, #3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 809a 	beq.w	80024d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <HAL_GPIO_Init+0x2cc>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a54      	ldr	r2, [pc, #336]	@ (80024fc <HAL_GPIO_Init+0x2cc>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b52      	ldr	r3, [pc, #328]	@ (80024fc <HAL_GPIO_Init+0x2cc>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1e0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a46      	ldr	r2, [pc, #280]	@ (8002504 <HAL_GPIO_Init+0x2d4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1dc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <HAL_GPIO_Init+0x2d8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1d8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a44      	ldr	r2, [pc, #272]	@ (800250c <HAL_GPIO_Init+0x2dc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1d4>
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x1e2>
 8002404:	2305      	movs	r3, #5
 8002406:	e004      	b.n	8002412 <HAL_GPIO_Init+0x1e2>
 8002408:	2302      	movs	r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x1e2>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_GPIO_Init+0x1e2>
 8002410:	2300      	movs	r3, #0
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002422:	4937      	ldr	r1, [pc, #220]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002430:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002454:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800247e:	4a24      	ldr	r2, [pc, #144]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a8:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002510 <HAL_GPIO_Init+0x2e0>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f aea9 	bne.w	8002240 <HAL_GPIO_Init+0x10>
  }
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010000 	.word	0x40010000
 8002504:	48000400 	.word	0x48000400
 8002508:	48000800 	.word	0x48000800
 800250c:	48000c00 	.word	0x48000c00
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800254a:	af00      	add	r7, sp, #0
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002554:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f000 bff4 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 816d 	beq.w	800285a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002580:	4bb4      	ldr	r3, [pc, #720]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800258c:	4bb1      	ldr	r3, [pc, #708]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d157      	bne.n	8002648 <HAL_RCC_OscConfig+0x104>
 8002598:	4bae      	ldr	r3, [pc, #696]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a4:	d150      	bne.n	8002648 <HAL_RCC_OscConfig+0x104>
 80025a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80025c6:	d802      	bhi.n	80025ce <HAL_RCC_OscConfig+0x8a>
 80025c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0xb6>
 80025ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025f6:	4b97      	ldr	r3, [pc, #604]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002602:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800260e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8114 	beq.w	8002858 <HAL_RCC_OscConfig+0x314>
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 810b 	bne.w	8002858 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f000 bf85 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x124>
 800265a:	4b7e      	ldr	r3, [pc, #504]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7d      	ldr	r2, [pc, #500]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e036      	b.n	80026d6 <HAL_RCC_OscConfig+0x192>
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x14e>
 8002678:	4b76      	ldr	r3, [pc, #472]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a75      	ldr	r2, [pc, #468]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b73      	ldr	r3, [pc, #460]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a72      	ldr	r2, [pc, #456]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e021      	b.n	80026d6 <HAL_RCC_OscConfig+0x192>
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x17a>
 80026a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x192>
 80026be:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a64      	ldr	r2, [pc, #400]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	495a      	ldr	r1, [pc, #360]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d054      	beq.n	80027aa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fc80 	bl	8002004 <HAL_GetTick>
 8002704:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270a:	f7ff fc7b 	bl	8002004 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d902      	bls.n	8002720 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	f000 bf19 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 8002720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002724:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002734:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002740:	d802      	bhi.n	8002748 <HAL_RCC_OscConfig+0x204>
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e015      	b.n	8002774 <HAL_RCC_OscConfig+0x230>
 8002748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800274c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800275c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002760:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002764:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002770:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002778:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800277c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002780:	fa92 f2a2 	rbit	r2, r2
 8002784:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002788:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0b0      	beq.n	800270a <HAL_RCC_OscConfig+0x1c6>
 80027a8:	e057      	b.n	800285a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fc2b 	bl	8002004 <HAL_GetTick>
 80027ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fc26 	bl	8002004 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	@ 0x64
 80027c2:	d902      	bls.n	80027ca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f000 bec4 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 80027ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ea:	d802      	bhi.n	80027f2 <HAL_RCC_OscConfig+0x2ae>
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x2da>
 80027f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002806:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800280e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_RCC_OscConfig+0x310>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002822:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002826:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800282a:	fa92 f2a2 	rbit	r2, r2
 800282e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002832:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0220 	orr.w	r2, r2, #32
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1b0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x270>
 8002852:	e002      	b.n	800285a <HAL_RCC_OscConfig+0x316>
 8002854:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 816c 	beq.w	8002b48 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002870:	4bcc      	ldr	r3, [pc, #816]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800287c:	4bc9      	ldr	r3, [pc, #804]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d16d      	bne.n	8002964 <HAL_RCC_OscConfig+0x420>
 8002888:	4bc6      	ldr	r3, [pc, #792]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d167      	bne.n	8002964 <HAL_RCC_OscConfig+0x420>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80028a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80028b2:	d802      	bhi.n	80028ba <HAL_RCC_OscConfig+0x376>
 80028b4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	e013      	b.n	80028e2 <HAL_RCC_OscConfig+0x39e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028cc:	2302      	movs	r3, #2
 80028ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028de:	4bb1      	ldr	r3, [pc, #708]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2202      	movs	r2, #2
 80028e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f002 021f 	and.w	r2, r2, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCC_OscConfig+0x3e6>
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d002      	beq.n	800292a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f000 be14 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	21f8      	movs	r1, #248	@ 0xf8
 8002940:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002948:	fa91 f1a1 	rbit	r1, r1
 800294c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002950:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002954:	fab1 f181 	clz	r1, r1
 8002958:	b2c9      	uxtb	r1, r1
 800295a:	408b      	lsls	r3, r1
 800295c:	4991      	ldr	r1, [pc, #580]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e0f1      	b.n	8002b48 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8083 	beq.w	8002a7c <HAL_RCC_OscConfig+0x538>
 8002976:	2301      	movs	r3, #1
 8002978:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002988:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002996:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff fb2f 	bl	8002004 <HAL_GetTick>
 80029a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff fb2a 	bl	8002004 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d902      	bls.n	80029c2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 bdc8 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b3f      	cmp	r3, #63	@ 0x3f
 80029e0:	d802      	bhi.n	80029e8 <HAL_RCC_OscConfig+0x4a4>
 80029e2:	4b70      	ldr	r3, [pc, #448]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e013      	b.n	8002a10 <HAL_RCC_OscConfig+0x4cc>
 80029e8:	2302      	movs	r3, #2
 80029ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029fa:	2302      	movs	r3, #2
 80029fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a00:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a0c:	4b65      	ldr	r3, [pc, #404]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2202      	movs	r2, #2
 8002a12:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a16:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a1a:	fa92 f2a2 	rbit	r2, r2
 8002a1e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a22:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a26:	fab2 f282 	clz	r2, r2
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f042 0220 	orr.w	r2, r2, #32
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f002 021f 	and.w	r2, r2, #31
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0b4      	beq.n	80029ac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b58      	ldr	r3, [pc, #352]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	21f8      	movs	r1, #248	@ 0xf8
 8002a58:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a60:	fa91 f1a1 	rbit	r1, r1
 8002a64:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a68:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a6c:	fab1 f181 	clz	r1, r1
 8002a70:	b2c9      	uxtb	r1, r1
 8002a72:	408b      	lsls	r3, r1
 8002a74:	494b      	ldr	r1, [pc, #300]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
 8002a7a:	e065      	b.n	8002b48 <HAL_RCC_OscConfig+0x604>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff faac 	bl	8002004 <HAL_GetTick>
 8002aac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7ff faa7 	bl	8002004 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	f000 bd45 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ae6:	d802      	bhi.n	8002aee <HAL_RCC_OscConfig+0x5aa>
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	e013      	b.n	8002b16 <HAL_RCC_OscConfig+0x5d2>
 8002aee:	2302      	movs	r3, #2
 8002af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x660>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2202      	movs	r2, #2
 8002b18:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b28:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1b4      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8115 	beq.w	8002d88 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07e      	beq.n	8002c6c <HAL_RCC_OscConfig+0x728>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_RCC_OscConfig+0x664>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7ff fa34 	bl	8002004 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba0:	e00f      	b.n	8002bc2 <HAL_RCC_OscConfig+0x67e>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bac:	f7ff fa2a 	bl	8002004 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f000 bcc8 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bdc:	2202      	movs	r2, #2
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c28:	2102      	movs	r1, #2
 8002c2a:	6019      	str	r1, [r3, #0]
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f1a3 	rbit	r1, r3
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c42:	6019      	str	r1, [r3, #0]
  return result;
 8002c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0a0      	beq.n	8002bac <HAL_RCC_OscConfig+0x668>
 8002c6a:	e08d      	b.n	8002d88 <HAL_RCC_OscConfig+0x844>
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c8e:	601a      	str	r2, [r3, #0]
  return result;
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b90      	ldr	r3, [pc, #576]	@ (8002ee4 <HAL_RCC_OscConfig+0x9a0>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7ff f9a9 	bl	8002004 <HAL_GetTick>
 8002cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff f9a4 	bl	8002004 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f000 bc42 	b.w	8003552 <HAL_RCC_OscConfig+0x100e>
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d1e:	2202      	movs	r2, #2
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3a:	4b69      	ldr	r3, [pc, #420]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d46:	2102      	movs	r1, #2
 8002d48:	6019      	str	r1, [r3, #0]
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f1a3 	rbit	r1, r3
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d60:	6019      	str	r1, [r3, #0]
  return result;
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d197      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 819e 	beq.w	80030da <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	61d3      	str	r3, [r2, #28]
 8002dbc:	4b48      	ldr	r3, [pc, #288]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <HAL_RCC_OscConfig+0x9a4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee8 <HAL_RCC_OscConfig+0x9a4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ee8 <HAL_RCC_OscConfig+0x9a4>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f905 	bl	8002004 <HAL_GetTick>
 8002dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	e009      	b.n	8002e14 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7ff f900 	bl	8002004 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	@ 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e39e      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x9a4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ef      	beq.n	8002e00 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x8fa>
 8002e30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e035      	b.n	8002eaa <HAL_RCC_OscConfig+0x966>
 8002e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x924>
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a23      	ldr	r2, [pc, #140]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	e020      	b.n	8002eaa <HAL_RCC_OscConfig+0x966>
 8002e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x94e>
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x966>
 8002e92:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee0 <HAL_RCC_OscConfig+0x99c>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8087 	beq.w	8002fca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7ff f8a2 	bl	8002004 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e012      	b.n	8002eec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7ff f89d 	bl	8002004 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d908      	bls.n	8002eec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e339      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	10908120 	.word	0x10908120
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0xa10>
 8002f4e:	4b98      	ldr	r3, [pc, #608]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0xa38>
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4b8d      	ldr	r3, [pc, #564]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f84:	2102      	movs	r1, #2
 8002f86:	6011      	str	r1, [r2, #0]
 8002f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	fa92 f1a2 	rbit	r1, r2
 8002f96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f9a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f9e:	6011      	str	r1, [r2, #0]
  return result;
 8002fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f43f af7f 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x982>
 8002fc8:	e07d      	b.n	80030c6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7ff f81b 	bl	8002004 <HAL_GetTick>
 8002fce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f816 	bl	8002004 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e2b2      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003032:	601a      	str	r2, [r3, #0]
  return result;
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800303c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0xb10>
 800304e:	4b58      	ldr	r3, [pc, #352]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0xb38>
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800305c:	2202      	movs	r2, #2
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003072:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003080:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003084:	2102      	movs	r1, #2
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fa92 f1a2 	rbit	r1, r2
 8003096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800309e:	6011      	str	r1, [r2, #0]
  return result;
 80030a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d186      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4a37      	ldr	r2, [pc, #220]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8232 	beq.w	8003550 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	4b30      	ldr	r3, [pc, #192]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	f000 8201 	beq.w	80034fc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b02      	cmp	r3, #2
 8003108:	f040 8157 	bne.w	80033ba <HAL_RCC_OscConfig+0xe76>
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800313a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003146:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	461a      	mov	r2, r3
 800314e:	2300      	movs	r3, #0
 8003150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe ff57 	bl	8002004 <HAL_GetTick>
 8003156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	e009      	b.n	8003170 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe ff52 	bl	8002004 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1f0      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 8003170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003174:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003178:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800317c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003190:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003194:	601a      	str	r2, [r3, #0]
  return result;
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800319e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80031a8:	d804      	bhi.n	80031b4 <HAL_RCC_OscConfig+0xc70>
 80031aa:	4b01      	ldr	r3, [pc, #4]	@ (80031b0 <HAL_RCC_OscConfig+0xc6c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e029      	b.n	8003204 <HAL_RCC_OscConfig+0xcc0>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	4bc3      	ldr	r3, [pc, #780]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003208:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800320c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003216:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fa92 f1a2 	rbit	r1, r2
 8003220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003224:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003228:	6011      	str	r1, [r2, #0]
  return result;
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d185      	bne.n	800315c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	4baf      	ldr	r3, [pc, #700]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	430b      	orrs	r3, r1
 8003272:	49a7      	ldr	r1, [pc, #668]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003280:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	461a      	mov	r2, r3
 80032ba:	2301      	movs	r3, #1
 80032bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fea1 	bl	8002004 <HAL_GetTick>
 80032c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c6:	e009      	b.n	80032dc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fe9c 	bl	8002004 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e13a      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800330a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b3f      	cmp	r3, #63	@ 0x3f
 8003314:	d802      	bhi.n	800331c <HAL_RCC_OscConfig+0xdd8>
 8003316:	4b7e      	ldr	r3, [pc, #504]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e027      	b.n	800336c <HAL_RCC_OscConfig+0xe28>
 800331c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003320:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800334a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003354:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa93 f2a3 	rbit	r2, r3
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4b69      	ldr	r3, [pc, #420]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003370:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003374:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800337e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fa92 f1a2 	rbit	r1, r2
 8003388:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800338c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003390:	6011      	str	r1, [r2, #0]
  return result;
 8003392:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003396:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f002 021f 	and.w	r2, r2, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d087      	beq.n	80032c8 <HAL_RCC_OscConfig+0xd84>
 80033b8:	e0ca      	b.n	8003550 <HAL_RCC_OscConfig+0x100c>
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033de:	601a      	str	r2, [r3, #0]
  return result;
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fe00 	bl	8002004 <HAL_GetTick>
 8003404:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e009      	b.n	800341e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fdfb 	bl	8002004 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e099      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800344c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b3f      	cmp	r3, #63	@ 0x3f
 8003456:	d802      	bhi.n	800345e <HAL_RCC_OscConfig+0xf1a>
 8003458:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e027      	b.n	80034ae <HAL_RCC_OscConfig+0xf6a>
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800346a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003470:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800348c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_RCC_OscConfig+0xfcc>)
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034ba:	6011      	str	r1, [r2, #0]
 80034bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fa92 f1a2 	rbit	r1, r2
 80034ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034d2:	6011      	str	r1, [r2, #0]
  return result;
 80034d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f042 0220 	orr.w	r2, r2, #32
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f002 021f 	and.w	r2, r2, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d187      	bne.n	800340a <HAL_RCC_OscConfig+0xec6>
 80034fa:	e029      	b.n	8003550 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d103      	bne.n	8003514 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e020      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
 8003510:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_RCC_OscConfig+0x1018>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800351c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003520:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	429a      	cmp	r2, r3
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003534:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003538:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000

08003560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b09e      	sub	sp, #120	@ 0x78
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e154      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b89      	ldr	r3, [pc, #548]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b86      	ldr	r3, [pc, #536]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0207 	bic.w	r2, r3, #7
 800358e:	4984      	ldr	r1, [pc, #528]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b82      	ldr	r3, [pc, #520]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e13c      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b7b      	ldr	r3, [pc, #492]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4978      	ldr	r1, [pc, #480]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80cd 	beq.w	800376e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d137      	bne.n	800364c <HAL_RCC_ClockConfig+0xec>
 80035dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80035f4:	d802      	bhi.n	80035fc <HAL_RCC_ClockConfig+0x9c>
 80035f6:	4b6b      	ldr	r3, [pc, #428]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e00f      	b.n	800361c <HAL_RCC_ClockConfig+0xbc>
 80035fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	667b      	str	r3, [r7, #100]	@ 0x64
 800360a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800360e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003618:	4b62      	ldr	r3, [pc, #392]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003620:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003622:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800362a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f042 0220 	orr.w	r2, r2, #32
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f002 021f 	and.w	r2, r2, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d171      	bne.n	800372c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0ea      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d137      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x164>
 8003654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003658:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b3f      	cmp	r3, #63	@ 0x3f
 800366c:	d802      	bhi.n	8003674 <HAL_RCC_ClockConfig+0x114>
 800366e:	4b4d      	ldr	r3, [pc, #308]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	e00f      	b.n	8003694 <HAL_RCC_ClockConfig+0x134>
 8003674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	647b      	str	r3, [r7, #68]	@ 0x44
 8003682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003686:	643b      	str	r3, [r7, #64]	@ 0x40
 8003688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003690:	4b44      	ldr	r3, [pc, #272]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003698:	63ba      	str	r2, [r7, #56]	@ 0x38
 800369a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800369c:	fa92 f2a2 	rbit	r2, r2
 80036a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d135      	bne.n	800372c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0ae      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
 80036c4:	2302      	movs	r3, #2
 80036c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80036da:	d802      	bhi.n	80036e2 <HAL_RCC_ClockConfig+0x182>
 80036dc:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	e00d      	b.n	80036fe <HAL_RCC_ClockConfig+0x19e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ee:	2302      	movs	r3, #2
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	2202      	movs	r2, #2
 8003700:	61ba      	str	r2, [r7, #24]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	fa92 f2a2 	rbit	r2, r2
 8003708:	617a      	str	r2, [r7, #20]
  return result;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	fab2 f282 	clz	r2, r2
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f042 0220 	orr.w	r2, r2, #32
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f002 021f 	and.w	r2, r2, #31
 800371c:	2101      	movs	r1, #1
 800371e:	fa01 f202 	lsl.w	r2, r1, r2
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e07a      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 0203 	bic.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	491a      	ldr	r1, [pc, #104]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373e:	f7fe fc61 	bl	8002004 <HAL_GetTick>
 8003742:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003744:	e00a      	b.n	800375c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003746:	f7fe fc5d 	bl	8002004 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e062      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_RCC_ClockConfig+0x244>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 020c 	and.w	r2, r3, #12
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	429a      	cmp	r2, r3
 800376c:	d1eb      	bne.n	8003746 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376e:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d215      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 0207 	bic.w	r2, r3, #7
 8003784:	4906      	ldr	r1, [pc, #24]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378c:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <HAL_RCC_ClockConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d006      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e041      	b.n	8003822 <HAL_RCC_ClockConfig+0x2c2>
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <HAL_RCC_ClockConfig+0x2cc>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	491a      	ldr	r1, [pc, #104]	@ (800382c <HAL_RCC_ClockConfig+0x2cc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b16      	ldr	r3, [pc, #88]	@ (800382c <HAL_RCC_ClockConfig+0x2cc>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4912      	ldr	r1, [pc, #72]	@ (800382c <HAL_RCC_ClockConfig+0x2cc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037e6:	f000 f829 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <HAL_RCC_ClockConfig+0x2cc>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f4:	22f0      	movs	r2, #240	@ 0xf0
 80037f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	40d3      	lsrs	r3, r2
 800380a:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <HAL_RCC_ClockConfig+0x2d0>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	fa21 f303 	lsr.w	r3, r1, r3
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <HAL_RCC_ClockConfig+0x2d4>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003816:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <HAL_RCC_ClockConfig+0x2d8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fbae 	bl	8001f7c <HAL_InitTick>
  
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3778      	adds	r7, #120	@ 0x78
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	08005c18 	.word	0x08005c18
 8003834:	20000048 	.word	0x20000048
 8003838:	2000004c 	.word	0x2000004c

0800383c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003856:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b04      	cmp	r3, #4
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x30>
 8003866:	2b08      	cmp	r3, #8
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x36>
 800386a:	e026      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800386c:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800386e:	613b      	str	r3, [r7, #16]
      break;
 8003870:	e026      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0c9b      	lsrs	r3, r3, #18
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800387c:	5cd3      	ldrb	r3, [r2, r3]
 800387e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003880:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	4a14      	ldr	r2, [pc, #80]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800388a:	5cd3      	ldrb	r3, [r2, r3]
 800388c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003898:	4a0e      	ldr	r2, [pc, #56]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e004      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	613b      	str	r3, [r7, #16]
      break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80038bc:	613b      	str	r3, [r7, #16]
      break;
 80038be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c0:	693b      	ldr	r3, [r7, #16]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	007a1200 	.word	0x007a1200
 80038d8:	08005c30 	.word	0x08005c30
 80038dc:	08005c40 	.word	0x08005c40
 80038e0:	003d0900 	.word	0x003d0900

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	@ (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000048 	.word	0x20000048

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003902:	f7ff ffef 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003906:	4601      	mov	r1, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003910:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003914:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	fa92 f2a2 	rbit	r2, r2
 800391c:	603a      	str	r2, [r7, #0]
  return result;
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	40d3      	lsrs	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <HAL_RCC_GetPCLK1Freq+0x40>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	08005c28 	.word	0x08005c28

08003940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003946:	f7ff ffcd 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 800394a:	4601      	mov	r1, r0
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003954:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003958:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	fa92 f2a2 	rbit	r2, r2
 8003960:	603a      	str	r2, [r7, #0]
  return result;
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	fab2 f282 	clz	r2, r2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	40d3      	lsrs	r3, r2
 800396c:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x40>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	08005c28 	.word	0x08005c28

08003984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e095      	b.n	8003ac2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a6:	d009      	beq.n	80039bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
 80039ae:	e005      	b.n	80039bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe f992 	bl	8001d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039fc:	d902      	bls.n	8003a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e002      	b.n	8003a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a12:	d007      	beq.n	8003a24 <HAL_SPI_Init+0xa0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a1c:	d002      	beq.n	8003a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a66:	ea42 0103 	orr.w	r1, r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 0204 	and.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003aa0:	ea42 0103 	orr.w	r1, r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b088      	sub	sp, #32
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_SPI_Transmit+0x22>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e15f      	b.n	8003dac <HAL_SPI_Transmit+0x2e2>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af4:	f7fe fa86 	bl	8002004 <HAL_GetTick>
 8003af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b0e:	e148      	b.n	8003da2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_Transmit+0x52>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b20:	e13f      	b.n	8003da2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6c:	d10f      	bne.n	8003b8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d007      	beq.n	8003bac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb4:	d94f      	bls.n	8003c56 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Transmit+0xfa>
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d142      	bne.n	8003c4a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	881a      	ldrh	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003be8:	e02f      	b.n	8003c4a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d112      	bne.n	8003c1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c1c:	e015      	b.n	8003c4a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1e:	f7fe f9f1 	bl	8002004 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d803      	bhi.n	8003c36 <HAL_SPI_Transmit+0x16c>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d102      	bne.n	8003c3c <HAL_SPI_Transmit+0x172>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c48:	e0ab      	b.n	8003da2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ca      	bne.n	8003bea <HAL_SPI_Transmit+0x120>
 8003c54:	e080      	b.n	8003d58 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_SPI_Transmit+0x19a>
 8003c5e:	8afb      	ldrh	r3, [r7, #22]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d174      	bne.n	8003d4e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d912      	bls.n	8003c94 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b02      	subs	r3, #2
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c92:	e05c      	b.n	8003d4e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cba:	e048      	b.n	8003d4e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d12b      	bne.n	8003d22 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d912      	bls.n	8003cfa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b02      	subs	r3, #2
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cf8:	e029      	b.n	8003d4e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d20:	e015      	b.n	8003d4e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d22:	f7fe f96f 	bl	8002004 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d803      	bhi.n	8003d3a <HAL_SPI_Transmit+0x270>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d102      	bne.n	8003d40 <HAL_SPI_Transmit+0x276>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d4c:	e029      	b.n	8003da2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1b1      	bne.n	8003cbc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fcf9 	bl	8004754 <SPI_EndRxTxTransaction>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e003      	b.n	8003da2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd8:	e11a      	b.n	8004010 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de2:	d112      	bne.n	8003e0a <HAL_SPI_Receive+0x56>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10e      	bne.n	8003e0a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2204      	movs	r2, #4
 8003df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f90e 	bl	8004022 <HAL_SPI_TransmitReceive>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e107      	b.n	800401a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_SPI_Receive+0x64>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e100      	b.n	800401a <HAL_SPI_Receive+0x266>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e20:	f7fe f8f0 	bl	8002004 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x7e>
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e36:	e0eb      	b.n	8004010 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e82:	d908      	bls.n	8003e96 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	e007      	b.n	8003ea6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eae:	d10f      	bne.n	8003ed0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d007      	beq.n	8003eee <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ef6:	d86f      	bhi.n	8003fd8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ef8:	e034      	b.n	8003f64 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d117      	bne.n	8003f38 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f103 020c 	add.w	r2, r3, #12
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003f36:	e015      	b.n	8003f64 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fe f864 	bl	8002004 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d803      	bhi.n	8003f50 <HAL_SPI_Receive+0x19c>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d102      	bne.n	8003f56 <HAL_SPI_Receive+0x1a2>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003f62:	e055      	b.n	8004010 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1c4      	bne.n	8003efa <HAL_SPI_Receive+0x146>
 8003f70:	e038      	b.n	8003fe4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d115      	bne.n	8003fac <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	1c9a      	adds	r2, r3, #2
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003faa:	e015      	b.n	8003fd8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fac:	f7fe f82a 	bl	8002004 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <HAL_SPI_Receive+0x210>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Receive+0x216>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003fd6:	e01b      	b.n	8004010 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1c6      	bne.n	8003f72 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	6839      	ldr	r1, [r7, #0]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fb5b 	bl	80046a4 <SPI_EndRxTransaction>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
 8004006:	e003      	b.n	8004010 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b08a      	sub	sp, #40	@ 0x28
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004030:	2301      	movs	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x26>
 8004044:	2302      	movs	r3, #2
 8004046:	e20a      	b.n	800445e <HAL_SPI_TransmitReceive+0x43c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004050:	f7fd ffd8 	bl	8002004 <HAL_GetTick>
 8004054:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800405c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800406c:	7efb      	ldrb	r3, [r7, #27]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d00e      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x6e>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004078:	d106      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x66>
 8004082:	7efb      	ldrb	r3, [r7, #27]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d003      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004088:	2302      	movs	r3, #2
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800408e:	e1e0      	b.n	8004452 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x80>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x80>
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80040a8:	e1d3      	b.n	8004452 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d003      	beq.n	80040be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	887a      	ldrh	r2, [r7, #2]
 80040ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004100:	d802      	bhi.n	8004108 <HAL_SPI_TransmitReceive+0xe6>
 8004102:	8a3b      	ldrh	r3, [r7, #16]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d908      	bls.n	800411a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	e007      	b.n	800412a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d007      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004150:	f240 8081 	bls.w	8004256 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x140>
 800415c:	8a7b      	ldrh	r3, [r7, #18]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d16d      	bne.n	800423e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004186:	e05a      	b.n	800423e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d11b      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x1ac>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x1ac>
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d113      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11c      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x1f4>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d016      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	b292      	uxth	r2, r2
 80041f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004212:	2301      	movs	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004216:	f7fd fef5 	bl	8002004 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004222:	429a      	cmp	r2, r3
 8004224:	d80b      	bhi.n	800423e <HAL_SPI_TransmitReceive+0x21c>
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d007      	beq.n	800423e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800423c:	e109      	b.n	8004452 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d19f      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x166>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d199      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x166>
 8004254:	e0e3      	b.n	800441e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_SPI_TransmitReceive+0x244>
 800425e:	8a7b      	ldrh	r3, [r7, #18]
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 80cf 	bne.w	8004404 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d912      	bls.n	8004296 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b02      	subs	r3, #2
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004294:	e0b6      	b.n	8004404 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042bc:	e0a2      	b.n	8004404 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d134      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x314>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02f      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x314>
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d12c      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d912      	bls.n	800430c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b02      	subs	r3, #2
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800430a:	e012      	b.n	8004332 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d148      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x3b4>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d042      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d923      	bls.n	80043a4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	b292      	uxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b02      	subs	r3, #2
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d81f      	bhi.n	80043d2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	e016      	b.n	80043d2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f103 020c 	add.w	r2, r3, #12
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043d2:	2301      	movs	r3, #1
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043d6:	f7fd fe15 	bl	8002004 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d803      	bhi.n	80043ee <HAL_SPI_TransmitReceive+0x3cc>
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d102      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x3d2>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d107      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004402:	e026      	b.n	8004452 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	f47f af57 	bne.w	80042be <HAL_SPI_TransmitReceive+0x29c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af50 	bne.w	80042be <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f996 	bl	8004754 <SPI_EndRxTxTransaction>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004448:	e003      	b.n	8004452 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800445a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800445e:	4618      	mov	r0, r3
 8004460:	3728      	adds	r7, #40	@ 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004478:	f7fd fdc4 	bl	8002004 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004488:	f7fd fdbc 	bl	8002004 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448e:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	0d1b      	lsrs	r3, r3, #20
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	e054      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d050      	beq.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a8:	f7fd fdac 	bl	8002004 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d902      	bls.n	80044be <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13d      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d6:	d111      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e0:	d004      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d107      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004504:	d10f      	bne.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e017      	b.n	800456a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3b01      	subs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d19b      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000048 	.word	0x20000048

08004578 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800458a:	f7fd fd3b 	bl	8002004 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	4413      	add	r3, r2
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800459a:	f7fd fd33 	bl	8002004 <HAL_GetTick>
 800459e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045a8:	4b3d      	ldr	r3, [pc, #244]	@ (80046a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00da      	lsls	r2, r3, #3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	0d1b      	lsrs	r3, r3, #20
 80045b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045c0:	e060      	b.n	8004684 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80045c8:	d107      	bne.n	80045da <SPI_WaitFifoStateUntilTimeout+0x62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d050      	beq.n	8004684 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e2:	f7fd fd0f 	bl	8002004 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d13d      	bne.n	8004674 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004606:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004610:	d111      	bne.n	8004636 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461a:	d004      	beq.n	8004626 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004624:	d107      	bne.n	8004636 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004634:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463e:	d10f      	bne.n	8004660 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e010      	b.n	8004696 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3b01      	subs	r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d196      	bne.n	80045c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3728      	adds	r7, #40	@ 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000048 	.word	0x20000048

080046a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046b8:	d111      	bne.n	80046de <SPI_EndRxTransaction+0x3a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c2:	d004      	beq.n	80046ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046cc:	d107      	bne.n	80046de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	2180      	movs	r1, #128	@ 0x80
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff febd 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e023      	b.n	800474c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800470c:	d11d      	bne.n	800474a <SPI_EndRxTransaction+0xa6>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004716:	d004      	beq.n	8004722 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d113      	bne.n	800474a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff22 	bl	8004578 <SPI_WaitFifoStateUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e000      	b.n	800474c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff ff03 	bl	8004578 <SPI_WaitFifoStateUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e027      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	2180      	movs	r1, #128	@ 0x80
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fe68 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e014      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fedc 	bl	8004578 <SPI_WaitFifoStateUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e000      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e040      	b.n	8004874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fabe 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9e8 	bl	8004bfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8af 	bl	8004990 <UART_SetConfig>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e01b      	b.n	8004874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800484a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800485a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa67 	bl	8004d40 <UART_CheckIdleState>
 8004872:	4603      	mov	r3, r0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004890:	2b20      	cmp	r3, #32
 8004892:	d177      	bne.n	8004984 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Transmit+0x24>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e070      	b.n	8004986 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2221      	movs	r2, #33	@ 0x21
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fd fba7 	bl	8002004 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d0:	d108      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e003      	b.n	80048ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048ec:	e02f      	b.n	800494e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	@ 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fac9 	bl	8004e90 <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e03b      	b.n	8004986 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	881a      	ldrh	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	b292      	uxth	r2, r2
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3302      	adds	r3, #2
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e007      	b.n	800493c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1c9      	bne.n	80048ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2140      	movs	r1, #64	@ 0x40
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fa93 	bl	8004e90 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e005      	b.n	8004986 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b8a      	ldr	r3, [pc, #552]	@ (8004be4 <UART_SetConfig+0x254>)
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a78      	ldr	r2, [pc, #480]	@ (8004be8 <UART_SetConfig+0x258>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d120      	bne.n	8004a4e <UART_SetConfig+0xbe>
 8004a0c:	4b77      	ldr	r3, [pc, #476]	@ (8004bec <UART_SetConfig+0x25c>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d817      	bhi.n	8004a48 <UART_SetConfig+0xb8>
 8004a18:	a201      	add	r2, pc, #4	@ (adr r2, 8004a20 <UART_SetConfig+0x90>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a3d 	.word	0x08004a3d
 8004a28:	08004a43 	.word	0x08004a43
 8004a2c:	08004a37 	.word	0x08004a37
 8004a30:	2300      	movs	r3, #0
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e01d      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e01a      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e017      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e014      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e011      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a67      	ldr	r2, [pc, #412]	@ (8004bf0 <UART_SetConfig+0x260>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d102      	bne.n	8004a5e <UART_SetConfig+0xce>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a64      	ldr	r2, [pc, #400]	@ (8004bf4 <UART_SetConfig+0x264>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d102      	bne.n	8004a6e <UART_SetConfig+0xde>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e001      	b.n	8004a72 <UART_SetConfig+0xe2>
 8004a6e:	2310      	movs	r3, #16
 8004a70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7a:	d15a      	bne.n	8004b32 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a7c:	7ffb      	ldrb	r3, [r7, #31]
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d827      	bhi.n	8004ad2 <UART_SetConfig+0x142>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <UART_SetConfig+0xf8>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	08004abd 	.word	0x08004abd
 8004a94:	08004ad3 	.word	0x08004ad3
 8004a98:	08004ac3 	.word	0x08004ac3
 8004a9c:	08004ad3 	.word	0x08004ad3
 8004aa0:	08004ad3 	.word	0x08004ad3
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	08004acb 	.word	0x08004acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7fe ff26 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004ab0:	61b8      	str	r0, [r7, #24]
        break;
 8004ab2:	e013      	b.n	8004adc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe ff44 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	61b8      	str	r0, [r7, #24]
        break;
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abc:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf8 <UART_SetConfig+0x268>)
 8004abe:	61bb      	str	r3, [r7, #24]
        break;
 8004ac0:	e00c      	b.n	8004adc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7fe febb 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8004ac6:	61b8      	str	r0, [r7, #24]
        break;
 8004ac8:	e008      	b.n	8004adc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ace:	61bb      	str	r3, [r7, #24]
        break;
 8004ad0:	e004      	b.n	8004adc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8004ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d074      	beq.n	8004bcc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	005a      	lsls	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d916      	bls.n	8004b2c <UART_SetConfig+0x19c>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b04:	d212      	bcs.n	8004b2c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f023 030f 	bic.w	r3, r3, #15
 8004b0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	89fa      	ldrh	r2, [r7, #14]
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	e04f      	b.n	8004bcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	77bb      	strb	r3, [r7, #30]
 8004b30:	e04c      	b.n	8004bcc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b32:	7ffb      	ldrb	r3, [r7, #31]
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d828      	bhi.n	8004b8a <UART_SetConfig+0x1fa>
 8004b38:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0x1b0>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe feca 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004b68:	61b8      	str	r0, [r7, #24]
        break;
 8004b6a:	e013      	b.n	8004b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fe fee8 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 8004b70:	61b8      	str	r0, [r7, #24]
        break;
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b20      	ldr	r3, [pc, #128]	@ (8004bf8 <UART_SetConfig+0x268>)
 8004b76:	61bb      	str	r3, [r7, #24]
        break;
 8004b78:	e00c      	b.n	8004b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe fe5f 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8004b7e:	61b8      	str	r0, [r7, #24]
        break;
 8004b80:	e008      	b.n	8004b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e004      	b.n	8004b94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	77bb      	strb	r3, [r7, #30]
        break;
 8004b92:	bf00      	nop
    }

    if (pclk != 0U)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	085a      	lsrs	r2, r3, #1
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d909      	bls.n	8004bc8 <UART_SetConfig+0x238>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bba:	d205      	bcs.n	8004bc8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	e001      	b.n	8004bcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	efff69f3 	.word	0xefff69f3
 8004be8:	40013800 	.word	0x40013800
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40004400 	.word	0x40004400
 8004bf4:	40004800 	.word	0x40004800
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfa:	d10a      	bne.n	8004d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b098      	sub	sp, #96	@ 0x60
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d50:	f7fd f958 	bl	8002004 <HAL_GetTick>
 8004d54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d12e      	bne.n	8004dc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f88c 	bl	8004e90 <UART_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d021      	beq.n	8004dc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e6      	bne.n	8004d7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e062      	b.n	8004e88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d149      	bne.n	8004e64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f856 	bl	8004e90 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d03c      	beq.n	8004e64 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e3c:	61fa      	str	r2, [r7, #28]
 8004e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	69b9      	ldr	r1, [r7, #24]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	617b      	str	r3, [r7, #20]
   return(result);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e5      	bne.n	8004e1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e011      	b.n	8004e88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3758      	adds	r7, #88	@ 0x58
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea0:	e04f      	b.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d04b      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fd f8ab 	bl	8002004 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e04e      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d037      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b80      	cmp	r3, #128	@ 0x80
 8004ed6:	d034      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d031      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d110      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f838 	bl	8004f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2208      	movs	r2, #8
 8004efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e029      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1c:	d111      	bne.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f81e 	bl	8004f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e00f      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d0a0      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b095      	sub	sp, #84	@ 0x54
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d118      	bne.n	8005012 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0310 	bic.w	r3, r3, #16
 8004ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	613b      	str	r3, [r7, #16]
   return(result);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e6      	bne.n	8004fe0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005026:	bf00      	nop
 8005028:	3754      	adds	r7, #84	@ 0x54
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <sbrk_aligned>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4e0f      	ldr	r6, [pc, #60]	@ (8005074 <sbrk_aligned+0x40>)
 8005038:	460c      	mov	r4, r1
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	4605      	mov	r5, r0
 800503e:	b911      	cbnz	r1, 8005046 <sbrk_aligned+0x12>
 8005040:	f000 f8ea 	bl	8005218 <_sbrk_r>
 8005044:	6030      	str	r0, [r6, #0]
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 f8e5 	bl	8005218 <_sbrk_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d103      	bne.n	800505a <sbrk_aligned+0x26>
 8005052:	f04f 34ff 	mov.w	r4, #4294967295
 8005056:	4620      	mov	r0, r4
 8005058:	bd70      	pop	{r4, r5, r6, pc}
 800505a:	1cc4      	adds	r4, r0, #3
 800505c:	f024 0403 	bic.w	r4, r4, #3
 8005060:	42a0      	cmp	r0, r4
 8005062:	d0f8      	beq.n	8005056 <sbrk_aligned+0x22>
 8005064:	1a21      	subs	r1, r4, r0
 8005066:	4628      	mov	r0, r5
 8005068:	f000 f8d6 	bl	8005218 <_sbrk_r>
 800506c:	3001      	adds	r0, #1
 800506e:	d1f2      	bne.n	8005056 <sbrk_aligned+0x22>
 8005070:	e7ef      	b.n	8005052 <sbrk_aligned+0x1e>
 8005072:	bf00      	nop
 8005074:	200003e4 	.word	0x200003e4

08005078 <_malloc_r>:
 8005078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800507c:	1ccd      	adds	r5, r1, #3
 800507e:	f025 0503 	bic.w	r5, r5, #3
 8005082:	3508      	adds	r5, #8
 8005084:	2d0c      	cmp	r5, #12
 8005086:	bf38      	it	cc
 8005088:	250c      	movcc	r5, #12
 800508a:	2d00      	cmp	r5, #0
 800508c:	4606      	mov	r6, r0
 800508e:	db01      	blt.n	8005094 <_malloc_r+0x1c>
 8005090:	42a9      	cmp	r1, r5
 8005092:	d904      	bls.n	800509e <_malloc_r+0x26>
 8005094:	230c      	movs	r3, #12
 8005096:	6033      	str	r3, [r6, #0]
 8005098:	2000      	movs	r0, #0
 800509a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005174 <_malloc_r+0xfc>
 80050a2:	f000 f869 	bl	8005178 <__malloc_lock>
 80050a6:	f8d8 3000 	ldr.w	r3, [r8]
 80050aa:	461c      	mov	r4, r3
 80050ac:	bb44      	cbnz	r4, 8005100 <_malloc_r+0x88>
 80050ae:	4629      	mov	r1, r5
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7ff ffbf 	bl	8005034 <sbrk_aligned>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	4604      	mov	r4, r0
 80050ba:	d158      	bne.n	800516e <_malloc_r+0xf6>
 80050bc:	f8d8 4000 	ldr.w	r4, [r8]
 80050c0:	4627      	mov	r7, r4
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	d143      	bne.n	800514e <_malloc_r+0xd6>
 80050c6:	2c00      	cmp	r4, #0
 80050c8:	d04b      	beq.n	8005162 <_malloc_r+0xea>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	4639      	mov	r1, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	eb04 0903 	add.w	r9, r4, r3
 80050d4:	f000 f8a0 	bl	8005218 <_sbrk_r>
 80050d8:	4581      	cmp	r9, r0
 80050da:	d142      	bne.n	8005162 <_malloc_r+0xea>
 80050dc:	6821      	ldr	r1, [r4, #0]
 80050de:	1a6d      	subs	r5, r5, r1
 80050e0:	4629      	mov	r1, r5
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7ff ffa6 	bl	8005034 <sbrk_aligned>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d03a      	beq.n	8005162 <_malloc_r+0xea>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	442b      	add	r3, r5
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	f8d8 3000 	ldr.w	r3, [r8]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	bb62      	cbnz	r2, 8005154 <_malloc_r+0xdc>
 80050fa:	f8c8 7000 	str.w	r7, [r8]
 80050fe:	e00f      	b.n	8005120 <_malloc_r+0xa8>
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	1b52      	subs	r2, r2, r5
 8005104:	d420      	bmi.n	8005148 <_malloc_r+0xd0>
 8005106:	2a0b      	cmp	r2, #11
 8005108:	d917      	bls.n	800513a <_malloc_r+0xc2>
 800510a:	1961      	adds	r1, r4, r5
 800510c:	42a3      	cmp	r3, r4
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	bf18      	it	ne
 8005112:	6059      	strne	r1, [r3, #4]
 8005114:	6863      	ldr	r3, [r4, #4]
 8005116:	bf08      	it	eq
 8005118:	f8c8 1000 	streq.w	r1, [r8]
 800511c:	5162      	str	r2, [r4, r5]
 800511e:	604b      	str	r3, [r1, #4]
 8005120:	4630      	mov	r0, r6
 8005122:	f000 f82f 	bl	8005184 <__malloc_unlock>
 8005126:	f104 000b 	add.w	r0, r4, #11
 800512a:	1d23      	adds	r3, r4, #4
 800512c:	f020 0007 	bic.w	r0, r0, #7
 8005130:	1ac2      	subs	r2, r0, r3
 8005132:	bf1c      	itt	ne
 8005134:	1a1b      	subne	r3, r3, r0
 8005136:	50a3      	strne	r3, [r4, r2]
 8005138:	e7af      	b.n	800509a <_malloc_r+0x22>
 800513a:	6862      	ldr	r2, [r4, #4]
 800513c:	42a3      	cmp	r3, r4
 800513e:	bf0c      	ite	eq
 8005140:	f8c8 2000 	streq.w	r2, [r8]
 8005144:	605a      	strne	r2, [r3, #4]
 8005146:	e7eb      	b.n	8005120 <_malloc_r+0xa8>
 8005148:	4623      	mov	r3, r4
 800514a:	6864      	ldr	r4, [r4, #4]
 800514c:	e7ae      	b.n	80050ac <_malloc_r+0x34>
 800514e:	463c      	mov	r4, r7
 8005150:	687f      	ldr	r7, [r7, #4]
 8005152:	e7b6      	b.n	80050c2 <_malloc_r+0x4a>
 8005154:	461a      	mov	r2, r3
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	42a3      	cmp	r3, r4
 800515a:	d1fb      	bne.n	8005154 <_malloc_r+0xdc>
 800515c:	2300      	movs	r3, #0
 800515e:	6053      	str	r3, [r2, #4]
 8005160:	e7de      	b.n	8005120 <_malloc_r+0xa8>
 8005162:	230c      	movs	r3, #12
 8005164:	6033      	str	r3, [r6, #0]
 8005166:	4630      	mov	r0, r6
 8005168:	f000 f80c 	bl	8005184 <__malloc_unlock>
 800516c:	e794      	b.n	8005098 <_malloc_r+0x20>
 800516e:	6005      	str	r5, [r0, #0]
 8005170:	e7d6      	b.n	8005120 <_malloc_r+0xa8>
 8005172:	bf00      	nop
 8005174:	200003e8 	.word	0x200003e8

08005178 <__malloc_lock>:
 8005178:	4801      	ldr	r0, [pc, #4]	@ (8005180 <__malloc_lock+0x8>)
 800517a:	f000 b887 	b.w	800528c <__retarget_lock_acquire_recursive>
 800517e:	bf00      	nop
 8005180:	20000528 	.word	0x20000528

08005184 <__malloc_unlock>:
 8005184:	4801      	ldr	r0, [pc, #4]	@ (800518c <__malloc_unlock+0x8>)
 8005186:	f000 b882 	b.w	800528e <__retarget_lock_release_recursive>
 800518a:	bf00      	nop
 800518c:	20000528 	.word	0x20000528

08005190 <_vsniprintf_r>:
 8005190:	b530      	push	{r4, r5, lr}
 8005192:	4614      	mov	r4, r2
 8005194:	2c00      	cmp	r4, #0
 8005196:	b09b      	sub	sp, #108	@ 0x6c
 8005198:	4605      	mov	r5, r0
 800519a:	461a      	mov	r2, r3
 800519c:	da05      	bge.n	80051aa <_vsniprintf_r+0x1a>
 800519e:	238b      	movs	r3, #139	@ 0x8b
 80051a0:	6003      	str	r3, [r0, #0]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	b01b      	add	sp, #108	@ 0x6c
 80051a8:	bd30      	pop	{r4, r5, pc}
 80051aa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	9319      	str	r3, [sp, #100]	@ 0x64
 80051b8:	bf14      	ite	ne
 80051ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051be:	4623      	moveq	r3, r4
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80051c8:	9100      	str	r1, [sp, #0]
 80051ca:	9104      	str	r1, [sp, #16]
 80051cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80051d0:	4669      	mov	r1, sp
 80051d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80051d4:	f000 f910 	bl	80053f8 <_svfiprintf_r>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	bfbc      	itt	lt
 80051dc:	238b      	movlt	r3, #139	@ 0x8b
 80051de:	602b      	strlt	r3, [r5, #0]
 80051e0:	2c00      	cmp	r4, #0
 80051e2:	d0e0      	beq.n	80051a6 <_vsniprintf_r+0x16>
 80051e4:	9b00      	ldr	r3, [sp, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e7dc      	b.n	80051a6 <_vsniprintf_r+0x16>

080051ec <vsniprintf>:
 80051ec:	b507      	push	{r0, r1, r2, lr}
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	460a      	mov	r2, r1
 80051f4:	4601      	mov	r1, r0
 80051f6:	4803      	ldr	r0, [pc, #12]	@ (8005204 <vsniprintf+0x18>)
 80051f8:	6800      	ldr	r0, [r0, #0]
 80051fa:	f7ff ffc9 	bl	8005190 <_vsniprintf_r>
 80051fe:	b003      	add	sp, #12
 8005200:	f85d fb04 	ldr.w	pc, [sp], #4
 8005204:	20000054 	.word	0x20000054

08005208 <memset>:
 8005208:	4402      	add	r2, r0
 800520a:	4603      	mov	r3, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <_sbrk_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d06      	ldr	r5, [pc, #24]	@ (8005234 <_sbrk_r+0x1c>)
 800521c:	2300      	movs	r3, #0
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	f7fc fe22 	bl	8001e6c <_sbrk>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_sbrk_r+0x1a>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_sbrk_r+0x1a>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20000524 	.word	0x20000524

08005238 <__errno>:
 8005238:	4b01      	ldr	r3, [pc, #4]	@ (8005240 <__errno+0x8>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000054 	.word	0x20000054

08005244 <__libc_init_array>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4d0d      	ldr	r5, [pc, #52]	@ (800527c <__libc_init_array+0x38>)
 8005248:	4c0d      	ldr	r4, [pc, #52]	@ (8005280 <__libc_init_array+0x3c>)
 800524a:	1b64      	subs	r4, r4, r5
 800524c:	10a4      	asrs	r4, r4, #2
 800524e:	2600      	movs	r6, #0
 8005250:	42a6      	cmp	r6, r4
 8005252:	d109      	bne.n	8005268 <__libc_init_array+0x24>
 8005254:	4d0b      	ldr	r5, [pc, #44]	@ (8005284 <__libc_init_array+0x40>)
 8005256:	4c0c      	ldr	r4, [pc, #48]	@ (8005288 <__libc_init_array+0x44>)
 8005258:	f000 fba6 	bl	80059a8 <_init>
 800525c:	1b64      	subs	r4, r4, r5
 800525e:	10a4      	asrs	r4, r4, #2
 8005260:	2600      	movs	r6, #0
 8005262:	42a6      	cmp	r6, r4
 8005264:	d105      	bne.n	8005272 <__libc_init_array+0x2e>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	f855 3b04 	ldr.w	r3, [r5], #4
 800526c:	4798      	blx	r3
 800526e:	3601      	adds	r6, #1
 8005270:	e7ee      	b.n	8005250 <__libc_init_array+0xc>
 8005272:	f855 3b04 	ldr.w	r3, [r5], #4
 8005276:	4798      	blx	r3
 8005278:	3601      	adds	r6, #1
 800527a:	e7f2      	b.n	8005262 <__libc_init_array+0x1e>
 800527c:	08005c8c 	.word	0x08005c8c
 8005280:	08005c8c 	.word	0x08005c8c
 8005284:	08005c8c 	.word	0x08005c8c
 8005288:	08005c90 	.word	0x08005c90

0800528c <__retarget_lock_acquire_recursive>:
 800528c:	4770      	bx	lr

0800528e <__retarget_lock_release_recursive>:
 800528e:	4770      	bx	lr

08005290 <memcpy>:
 8005290:	440a      	add	r2, r1
 8005292:	4291      	cmp	r1, r2
 8005294:	f100 33ff 	add.w	r3, r0, #4294967295
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	4770      	bx	lr
 800529c:	b510      	push	{r4, lr}
 800529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a6:	4291      	cmp	r1, r2
 80052a8:	d1f9      	bne.n	800529e <memcpy+0xe>
 80052aa:	bd10      	pop	{r4, pc}

080052ac <_free_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4605      	mov	r5, r0
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d041      	beq.n	8005338 <_free_r+0x8c>
 80052b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b8:	1f0c      	subs	r4, r1, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bfb8      	it	lt
 80052be:	18e4      	addlt	r4, r4, r3
 80052c0:	f7ff ff5a 	bl	8005178 <__malloc_lock>
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <_free_r+0x90>)
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	b933      	cbnz	r3, 80052d8 <_free_r+0x2c>
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	6014      	str	r4, [r2, #0]
 80052ce:	4628      	mov	r0, r5
 80052d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d4:	f7ff bf56 	b.w	8005184 <__malloc_unlock>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d908      	bls.n	80052ee <_free_r+0x42>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	1821      	adds	r1, r4, r0
 80052e0:	428b      	cmp	r3, r1
 80052e2:	bf01      	itttt	eq
 80052e4:	6819      	ldreq	r1, [r3, #0]
 80052e6:	685b      	ldreq	r3, [r3, #4]
 80052e8:	1809      	addeq	r1, r1, r0
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	e7ed      	b.n	80052ca <_free_r+0x1e>
 80052ee:	461a      	mov	r2, r3
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b10b      	cbz	r3, 80052f8 <_free_r+0x4c>
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	d9fa      	bls.n	80052ee <_free_r+0x42>
 80052f8:	6811      	ldr	r1, [r2, #0]
 80052fa:	1850      	adds	r0, r2, r1
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d10b      	bne.n	8005318 <_free_r+0x6c>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	4401      	add	r1, r0
 8005304:	1850      	adds	r0, r2, r1
 8005306:	4283      	cmp	r3, r0
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	d1e0      	bne.n	80052ce <_free_r+0x22>
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	4408      	add	r0, r1
 8005314:	6010      	str	r0, [r2, #0]
 8005316:	e7da      	b.n	80052ce <_free_r+0x22>
 8005318:	d902      	bls.n	8005320 <_free_r+0x74>
 800531a:	230c      	movs	r3, #12
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	e7d6      	b.n	80052ce <_free_r+0x22>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf04      	itt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	bf04      	itt	eq
 8005330:	1809      	addeq	r1, r1, r0
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	6054      	str	r4, [r2, #4]
 8005336:	e7ca      	b.n	80052ce <_free_r+0x22>
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	200003e8 	.word	0x200003e8

08005340 <__ssputs_r>:
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	688e      	ldr	r6, [r1, #8]
 8005346:	461f      	mov	r7, r3
 8005348:	42be      	cmp	r6, r7
 800534a:	680b      	ldr	r3, [r1, #0]
 800534c:	4682      	mov	sl, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4690      	mov	r8, r2
 8005352:	d82d      	bhi.n	80053b0 <__ssputs_r+0x70>
 8005354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005358:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800535c:	d026      	beq.n	80053ac <__ssputs_r+0x6c>
 800535e:	6965      	ldr	r5, [r4, #20]
 8005360:	6909      	ldr	r1, [r1, #16]
 8005362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005366:	eba3 0901 	sub.w	r9, r3, r1
 800536a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800536e:	1c7b      	adds	r3, r7, #1
 8005370:	444b      	add	r3, r9
 8005372:	106d      	asrs	r5, r5, #1
 8005374:	429d      	cmp	r5, r3
 8005376:	bf38      	it	cc
 8005378:	461d      	movcc	r5, r3
 800537a:	0553      	lsls	r3, r2, #21
 800537c:	d527      	bpl.n	80053ce <__ssputs_r+0x8e>
 800537e:	4629      	mov	r1, r5
 8005380:	f7ff fe7a 	bl	8005078 <_malloc_r>
 8005384:	4606      	mov	r6, r0
 8005386:	b360      	cbz	r0, 80053e2 <__ssputs_r+0xa2>
 8005388:	6921      	ldr	r1, [r4, #16]
 800538a:	464a      	mov	r2, r9
 800538c:	f7ff ff80 	bl	8005290 <memcpy>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6126      	str	r6, [r4, #16]
 800539e:	6165      	str	r5, [r4, #20]
 80053a0:	444e      	add	r6, r9
 80053a2:	eba5 0509 	sub.w	r5, r5, r9
 80053a6:	6026      	str	r6, [r4, #0]
 80053a8:	60a5      	str	r5, [r4, #8]
 80053aa:	463e      	mov	r6, r7
 80053ac:	42be      	cmp	r6, r7
 80053ae:	d900      	bls.n	80053b2 <__ssputs_r+0x72>
 80053b0:	463e      	mov	r6, r7
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4641      	mov	r1, r8
 80053b8:	f000 faa6 	bl	8005908 <memmove>
 80053bc:	68a3      	ldr	r3, [r4, #8]
 80053be:	1b9b      	subs	r3, r3, r6
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	4433      	add	r3, r6
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	2000      	movs	r0, #0
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	462a      	mov	r2, r5
 80053d0:	f000 fab4 	bl	800593c <_realloc_r>
 80053d4:	4606      	mov	r6, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1e0      	bne.n	800539c <__ssputs_r+0x5c>
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	4650      	mov	r0, sl
 80053de:	f7ff ff65 	bl	80052ac <_free_r>
 80053e2:	230c      	movs	r3, #12
 80053e4:	f8ca 3000 	str.w	r3, [sl]
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e7e9      	b.n	80053ca <__ssputs_r+0x8a>
	...

080053f8 <_svfiprintf_r>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4698      	mov	r8, r3
 80053fe:	898b      	ldrh	r3, [r1, #12]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	b09d      	sub	sp, #116	@ 0x74
 8005404:	4607      	mov	r7, r0
 8005406:	460d      	mov	r5, r1
 8005408:	4614      	mov	r4, r2
 800540a:	d510      	bpl.n	800542e <_svfiprintf_r+0x36>
 800540c:	690b      	ldr	r3, [r1, #16]
 800540e:	b973      	cbnz	r3, 800542e <_svfiprintf_r+0x36>
 8005410:	2140      	movs	r1, #64	@ 0x40
 8005412:	f7ff fe31 	bl	8005078 <_malloc_r>
 8005416:	6028      	str	r0, [r5, #0]
 8005418:	6128      	str	r0, [r5, #16]
 800541a:	b930      	cbnz	r0, 800542a <_svfiprintf_r+0x32>
 800541c:	230c      	movs	r3, #12
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b01d      	add	sp, #116	@ 0x74
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	2340      	movs	r3, #64	@ 0x40
 800542c:	616b      	str	r3, [r5, #20]
 800542e:	2300      	movs	r3, #0
 8005430:	9309      	str	r3, [sp, #36]	@ 0x24
 8005432:	2320      	movs	r3, #32
 8005434:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005438:	f8cd 800c 	str.w	r8, [sp, #12]
 800543c:	2330      	movs	r3, #48	@ 0x30
 800543e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055dc <_svfiprintf_r+0x1e4>
 8005442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005446:	f04f 0901 	mov.w	r9, #1
 800544a:	4623      	mov	r3, r4
 800544c:	469a      	mov	sl, r3
 800544e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005452:	b10a      	cbz	r2, 8005458 <_svfiprintf_r+0x60>
 8005454:	2a25      	cmp	r2, #37	@ 0x25
 8005456:	d1f9      	bne.n	800544c <_svfiprintf_r+0x54>
 8005458:	ebba 0b04 	subs.w	fp, sl, r4
 800545c:	d00b      	beq.n	8005476 <_svfiprintf_r+0x7e>
 800545e:	465b      	mov	r3, fp
 8005460:	4622      	mov	r2, r4
 8005462:	4629      	mov	r1, r5
 8005464:	4638      	mov	r0, r7
 8005466:	f7ff ff6b 	bl	8005340 <__ssputs_r>
 800546a:	3001      	adds	r0, #1
 800546c:	f000 80a7 	beq.w	80055be <_svfiprintf_r+0x1c6>
 8005470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005472:	445a      	add	r2, fp
 8005474:	9209      	str	r2, [sp, #36]	@ 0x24
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 809f 	beq.w	80055be <_svfiprintf_r+0x1c6>
 8005480:	2300      	movs	r3, #0
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800548a:	f10a 0a01 	add.w	sl, sl, #1
 800548e:	9304      	str	r3, [sp, #16]
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005496:	931a      	str	r3, [sp, #104]	@ 0x68
 8005498:	4654      	mov	r4, sl
 800549a:	2205      	movs	r2, #5
 800549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a0:	484e      	ldr	r0, [pc, #312]	@ (80055dc <_svfiprintf_r+0x1e4>)
 80054a2:	f7fa fead 	bl	8000200 <memchr>
 80054a6:	9a04      	ldr	r2, [sp, #16]
 80054a8:	b9d8      	cbnz	r0, 80054e2 <_svfiprintf_r+0xea>
 80054aa:	06d0      	lsls	r0, r2, #27
 80054ac:	bf44      	itt	mi
 80054ae:	2320      	movmi	r3, #32
 80054b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054b4:	0711      	lsls	r1, r2, #28
 80054b6:	bf44      	itt	mi
 80054b8:	232b      	movmi	r3, #43	@ 0x2b
 80054ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054be:	f89a 3000 	ldrb.w	r3, [sl]
 80054c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054c4:	d015      	beq.n	80054f2 <_svfiprintf_r+0xfa>
 80054c6:	9a07      	ldr	r2, [sp, #28]
 80054c8:	4654      	mov	r4, sl
 80054ca:	2000      	movs	r0, #0
 80054cc:	f04f 0c0a 	mov.w	ip, #10
 80054d0:	4621      	mov	r1, r4
 80054d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054d6:	3b30      	subs	r3, #48	@ 0x30
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d94b      	bls.n	8005574 <_svfiprintf_r+0x17c>
 80054dc:	b1b0      	cbz	r0, 800550c <_svfiprintf_r+0x114>
 80054de:	9207      	str	r2, [sp, #28]
 80054e0:	e014      	b.n	800550c <_svfiprintf_r+0x114>
 80054e2:	eba0 0308 	sub.w	r3, r0, r8
 80054e6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	46a2      	mov	sl, r4
 80054f0:	e7d2      	b.n	8005498 <_svfiprintf_r+0xa0>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	9103      	str	r1, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfbb      	ittet	lt
 80054fe:	425b      	neglt	r3, r3
 8005500:	f042 0202 	orrlt.w	r2, r2, #2
 8005504:	9307      	strge	r3, [sp, #28]
 8005506:	9307      	strlt	r3, [sp, #28]
 8005508:	bfb8      	it	lt
 800550a:	9204      	strlt	r2, [sp, #16]
 800550c:	7823      	ldrb	r3, [r4, #0]
 800550e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005510:	d10a      	bne.n	8005528 <_svfiprintf_r+0x130>
 8005512:	7863      	ldrb	r3, [r4, #1]
 8005514:	2b2a      	cmp	r3, #42	@ 0x2a
 8005516:	d132      	bne.n	800557e <_svfiprintf_r+0x186>
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	9203      	str	r2, [sp, #12]
 8005520:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005524:	3402      	adds	r4, #2
 8005526:	9305      	str	r3, [sp, #20]
 8005528:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055ec <_svfiprintf_r+0x1f4>
 800552c:	7821      	ldrb	r1, [r4, #0]
 800552e:	2203      	movs	r2, #3
 8005530:	4650      	mov	r0, sl
 8005532:	f7fa fe65 	bl	8000200 <memchr>
 8005536:	b138      	cbz	r0, 8005548 <_svfiprintf_r+0x150>
 8005538:	9b04      	ldr	r3, [sp, #16]
 800553a:	eba0 000a 	sub.w	r0, r0, sl
 800553e:	2240      	movs	r2, #64	@ 0x40
 8005540:	4082      	lsls	r2, r0
 8005542:	4313      	orrs	r3, r2
 8005544:	3401      	adds	r4, #1
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554c:	4824      	ldr	r0, [pc, #144]	@ (80055e0 <_svfiprintf_r+0x1e8>)
 800554e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005552:	2206      	movs	r2, #6
 8005554:	f7fa fe54 	bl	8000200 <memchr>
 8005558:	2800      	cmp	r0, #0
 800555a:	d036      	beq.n	80055ca <_svfiprintf_r+0x1d2>
 800555c:	4b21      	ldr	r3, [pc, #132]	@ (80055e4 <_svfiprintf_r+0x1ec>)
 800555e:	bb1b      	cbnz	r3, 80055a8 <_svfiprintf_r+0x1b0>
 8005560:	9b03      	ldr	r3, [sp, #12]
 8005562:	3307      	adds	r3, #7
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	3308      	adds	r3, #8
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556e:	4433      	add	r3, r6
 8005570:	9309      	str	r3, [sp, #36]	@ 0x24
 8005572:	e76a      	b.n	800544a <_svfiprintf_r+0x52>
 8005574:	fb0c 3202 	mla	r2, ip, r2, r3
 8005578:	460c      	mov	r4, r1
 800557a:	2001      	movs	r0, #1
 800557c:	e7a8      	b.n	80054d0 <_svfiprintf_r+0xd8>
 800557e:	2300      	movs	r3, #0
 8005580:	3401      	adds	r4, #1
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	4619      	mov	r1, r3
 8005586:	f04f 0c0a 	mov.w	ip, #10
 800558a:	4620      	mov	r0, r4
 800558c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005590:	3a30      	subs	r2, #48	@ 0x30
 8005592:	2a09      	cmp	r2, #9
 8005594:	d903      	bls.n	800559e <_svfiprintf_r+0x1a6>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0c6      	beq.n	8005528 <_svfiprintf_r+0x130>
 800559a:	9105      	str	r1, [sp, #20]
 800559c:	e7c4      	b.n	8005528 <_svfiprintf_r+0x130>
 800559e:	fb0c 2101 	mla	r1, ip, r1, r2
 80055a2:	4604      	mov	r4, r0
 80055a4:	2301      	movs	r3, #1
 80055a6:	e7f0      	b.n	800558a <_svfiprintf_r+0x192>
 80055a8:	ab03      	add	r3, sp, #12
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	462a      	mov	r2, r5
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <_svfiprintf_r+0x1f0>)
 80055b0:	a904      	add	r1, sp, #16
 80055b2:	4638      	mov	r0, r7
 80055b4:	f3af 8000 	nop.w
 80055b8:	1c42      	adds	r2, r0, #1
 80055ba:	4606      	mov	r6, r0
 80055bc:	d1d6      	bne.n	800556c <_svfiprintf_r+0x174>
 80055be:	89ab      	ldrh	r3, [r5, #12]
 80055c0:	065b      	lsls	r3, r3, #25
 80055c2:	f53f af2d 	bmi.w	8005420 <_svfiprintf_r+0x28>
 80055c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055c8:	e72c      	b.n	8005424 <_svfiprintf_r+0x2c>
 80055ca:	ab03      	add	r3, sp, #12
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	462a      	mov	r2, r5
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <_svfiprintf_r+0x1f0>)
 80055d2:	a904      	add	r1, sp, #16
 80055d4:	4638      	mov	r0, r7
 80055d6:	f000 f879 	bl	80056cc <_printf_i>
 80055da:	e7ed      	b.n	80055b8 <_svfiprintf_r+0x1c0>
 80055dc:	08005c50 	.word	0x08005c50
 80055e0:	08005c5a 	.word	0x08005c5a
 80055e4:	00000000 	.word	0x00000000
 80055e8:	08005341 	.word	0x08005341
 80055ec:	08005c56 	.word	0x08005c56

080055f0 <_printf_common>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	4698      	mov	r8, r3
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005600:	4293      	cmp	r3, r2
 8005602:	bfb8      	it	lt
 8005604:	4613      	movlt	r3, r2
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800560c:	4607      	mov	r7, r0
 800560e:	460c      	mov	r4, r1
 8005610:	b10a      	cbz	r2, 8005616 <_printf_common+0x26>
 8005612:	3301      	adds	r3, #1
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0699      	lsls	r1, r3, #26
 800561a:	bf42      	ittt	mi
 800561c:	6833      	ldrmi	r3, [r6, #0]
 800561e:	3302      	addmi	r3, #2
 8005620:	6033      	strmi	r3, [r6, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	f015 0506 	ands.w	r5, r5, #6
 8005628:	d106      	bne.n	8005638 <_printf_common+0x48>
 800562a:	f104 0a19 	add.w	sl, r4, #25
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	6832      	ldr	r2, [r6, #0]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc26      	bgt.n	8005686 <_printf_common+0x96>
 8005638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	3b00      	subs	r3, #0
 8005640:	bf18      	it	ne
 8005642:	2301      	movne	r3, #1
 8005644:	0692      	lsls	r2, r2, #26
 8005646:	d42b      	bmi.n	80056a0 <_printf_common+0xb0>
 8005648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800564c:	4641      	mov	r1, r8
 800564e:	4638      	mov	r0, r7
 8005650:	47c8      	blx	r9
 8005652:	3001      	adds	r0, #1
 8005654:	d01e      	beq.n	8005694 <_printf_common+0xa4>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	6922      	ldr	r2, [r4, #16]
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf02      	ittt	eq
 8005662:	68e5      	ldreq	r5, [r4, #12]
 8005664:	6833      	ldreq	r3, [r6, #0]
 8005666:	1aed      	subeq	r5, r5, r3
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	bf0c      	ite	eq
 800566c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005670:	2500      	movne	r5, #0
 8005672:	4293      	cmp	r3, r2
 8005674:	bfc4      	itt	gt
 8005676:	1a9b      	subgt	r3, r3, r2
 8005678:	18ed      	addgt	r5, r5, r3
 800567a:	2600      	movs	r6, #0
 800567c:	341a      	adds	r4, #26
 800567e:	42b5      	cmp	r5, r6
 8005680:	d11a      	bne.n	80056b8 <_printf_common+0xc8>
 8005682:	2000      	movs	r0, #0
 8005684:	e008      	b.n	8005698 <_printf_common+0xa8>
 8005686:	2301      	movs	r3, #1
 8005688:	4652      	mov	r2, sl
 800568a:	4641      	mov	r1, r8
 800568c:	4638      	mov	r0, r7
 800568e:	47c8      	blx	r9
 8005690:	3001      	adds	r0, #1
 8005692:	d103      	bne.n	800569c <_printf_common+0xac>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	3501      	adds	r5, #1
 800569e:	e7c6      	b.n	800562e <_printf_common+0x3e>
 80056a0:	18e1      	adds	r1, r4, r3
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	2030      	movs	r0, #48	@ 0x30
 80056a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056aa:	4422      	add	r2, r4
 80056ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056b4:	3302      	adds	r3, #2
 80056b6:	e7c7      	b.n	8005648 <_printf_common+0x58>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4622      	mov	r2, r4
 80056bc:	4641      	mov	r1, r8
 80056be:	4638      	mov	r0, r7
 80056c0:	47c8      	blx	r9
 80056c2:	3001      	adds	r0, #1
 80056c4:	d0e6      	beq.n	8005694 <_printf_common+0xa4>
 80056c6:	3601      	adds	r6, #1
 80056c8:	e7d9      	b.n	800567e <_printf_common+0x8e>
	...

080056cc <_printf_i>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	7e0f      	ldrb	r7, [r1, #24]
 80056d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056d4:	2f78      	cmp	r7, #120	@ 0x78
 80056d6:	4691      	mov	r9, r2
 80056d8:	4680      	mov	r8, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	469a      	mov	sl, r3
 80056de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056e2:	d807      	bhi.n	80056f4 <_printf_i+0x28>
 80056e4:	2f62      	cmp	r7, #98	@ 0x62
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x32>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	f000 80d1 	beq.w	8005890 <_printf_i+0x1c4>
 80056ee:	2f58      	cmp	r7, #88	@ 0x58
 80056f0:	f000 80b8 	beq.w	8005864 <_printf_i+0x198>
 80056f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056fc:	e03a      	b.n	8005774 <_printf_i+0xa8>
 80056fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005702:	2b15      	cmp	r3, #21
 8005704:	d8f6      	bhi.n	80056f4 <_printf_i+0x28>
 8005706:	a101      	add	r1, pc, #4	@ (adr r1, 800570c <_printf_i+0x40>)
 8005708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800570c:	08005765 	.word	0x08005765
 8005710:	08005779 	.word	0x08005779
 8005714:	080056f5 	.word	0x080056f5
 8005718:	080056f5 	.word	0x080056f5
 800571c:	080056f5 	.word	0x080056f5
 8005720:	080056f5 	.word	0x080056f5
 8005724:	08005779 	.word	0x08005779
 8005728:	080056f5 	.word	0x080056f5
 800572c:	080056f5 	.word	0x080056f5
 8005730:	080056f5 	.word	0x080056f5
 8005734:	080056f5 	.word	0x080056f5
 8005738:	08005877 	.word	0x08005877
 800573c:	080057a3 	.word	0x080057a3
 8005740:	08005831 	.word	0x08005831
 8005744:	080056f5 	.word	0x080056f5
 8005748:	080056f5 	.word	0x080056f5
 800574c:	08005899 	.word	0x08005899
 8005750:	080056f5 	.word	0x080056f5
 8005754:	080057a3 	.word	0x080057a3
 8005758:	080056f5 	.word	0x080056f5
 800575c:	080056f5 	.word	0x080056f5
 8005760:	08005839 	.word	0x08005839
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005774:	2301      	movs	r3, #1
 8005776:	e09c      	b.n	80058b2 <_printf_i+0x1e6>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	6031      	str	r1, [r6, #0]
 8005780:	0606      	lsls	r6, r0, #24
 8005782:	d501      	bpl.n	8005788 <_printf_i+0xbc>
 8005784:	681d      	ldr	r5, [r3, #0]
 8005786:	e003      	b.n	8005790 <_printf_i+0xc4>
 8005788:	0645      	lsls	r5, r0, #25
 800578a:	d5fb      	bpl.n	8005784 <_printf_i+0xb8>
 800578c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005790:	2d00      	cmp	r5, #0
 8005792:	da03      	bge.n	800579c <_printf_i+0xd0>
 8005794:	232d      	movs	r3, #45	@ 0x2d
 8005796:	426d      	negs	r5, r5
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579c:	4858      	ldr	r0, [pc, #352]	@ (8005900 <_printf_i+0x234>)
 800579e:	230a      	movs	r3, #10
 80057a0:	e011      	b.n	80057c6 <_printf_i+0xfa>
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	0608      	lsls	r0, r1, #24
 80057a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057ac:	d402      	bmi.n	80057b4 <_printf_i+0xe8>
 80057ae:	0649      	lsls	r1, r1, #25
 80057b0:	bf48      	it	mi
 80057b2:	b2ad      	uxthmi	r5, r5
 80057b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057b6:	4852      	ldr	r0, [pc, #328]	@ (8005900 <_printf_i+0x234>)
 80057b8:	6033      	str	r3, [r6, #0]
 80057ba:	bf14      	ite	ne
 80057bc:	230a      	movne	r3, #10
 80057be:	2308      	moveq	r3, #8
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057c6:	6866      	ldr	r6, [r4, #4]
 80057c8:	60a6      	str	r6, [r4, #8]
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	db05      	blt.n	80057da <_printf_i+0x10e>
 80057ce:	6821      	ldr	r1, [r4, #0]
 80057d0:	432e      	orrs	r6, r5
 80057d2:	f021 0104 	bic.w	r1, r1, #4
 80057d6:	6021      	str	r1, [r4, #0]
 80057d8:	d04b      	beq.n	8005872 <_printf_i+0x1a6>
 80057da:	4616      	mov	r6, r2
 80057dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057e0:	fb03 5711 	mls	r7, r3, r1, r5
 80057e4:	5dc7      	ldrb	r7, [r0, r7]
 80057e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ea:	462f      	mov	r7, r5
 80057ec:	42bb      	cmp	r3, r7
 80057ee:	460d      	mov	r5, r1
 80057f0:	d9f4      	bls.n	80057dc <_printf_i+0x110>
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d10b      	bne.n	800580e <_printf_i+0x142>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	07df      	lsls	r7, r3, #31
 80057fa:	d508      	bpl.n	800580e <_printf_i+0x142>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	6861      	ldr	r1, [r4, #4]
 8005800:	4299      	cmp	r1, r3
 8005802:	bfde      	ittt	le
 8005804:	2330      	movle	r3, #48	@ 0x30
 8005806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800580a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800580e:	1b92      	subs	r2, r2, r6
 8005810:	6122      	str	r2, [r4, #16]
 8005812:	f8cd a000 	str.w	sl, [sp]
 8005816:	464b      	mov	r3, r9
 8005818:	aa03      	add	r2, sp, #12
 800581a:	4621      	mov	r1, r4
 800581c:	4640      	mov	r0, r8
 800581e:	f7ff fee7 	bl	80055f0 <_printf_common>
 8005822:	3001      	adds	r0, #1
 8005824:	d14a      	bne.n	80058bc <_printf_i+0x1f0>
 8005826:	f04f 30ff 	mov.w	r0, #4294967295
 800582a:	b004      	add	sp, #16
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	4832      	ldr	r0, [pc, #200]	@ (8005904 <_printf_i+0x238>)
 800583a:	2778      	movs	r7, #120	@ 0x78
 800583c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	061f      	lsls	r7, r3, #24
 8005846:	f851 5b04 	ldr.w	r5, [r1], #4
 800584a:	d402      	bmi.n	8005852 <_printf_i+0x186>
 800584c:	065f      	lsls	r7, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2ad      	uxthmi	r5, r5
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	07d9      	lsls	r1, r3, #31
 8005856:	bf44      	itt	mi
 8005858:	f043 0320 	orrmi.w	r3, r3, #32
 800585c:	6023      	strmi	r3, [r4, #0]
 800585e:	b11d      	cbz	r5, 8005868 <_printf_i+0x19c>
 8005860:	2310      	movs	r3, #16
 8005862:	e7ad      	b.n	80057c0 <_printf_i+0xf4>
 8005864:	4826      	ldr	r0, [pc, #152]	@ (8005900 <_printf_i+0x234>)
 8005866:	e7e9      	b.n	800583c <_printf_i+0x170>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	e7f6      	b.n	8005860 <_printf_i+0x194>
 8005872:	4616      	mov	r6, r2
 8005874:	e7bd      	b.n	80057f2 <_printf_i+0x126>
 8005876:	6833      	ldr	r3, [r6, #0]
 8005878:	6825      	ldr	r5, [r4, #0]
 800587a:	6961      	ldr	r1, [r4, #20]
 800587c:	1d18      	adds	r0, r3, #4
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	062e      	lsls	r6, r5, #24
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	d501      	bpl.n	800588a <_printf_i+0x1be>
 8005886:	6019      	str	r1, [r3, #0]
 8005888:	e002      	b.n	8005890 <_printf_i+0x1c4>
 800588a:	0668      	lsls	r0, r5, #25
 800588c:	d5fb      	bpl.n	8005886 <_printf_i+0x1ba>
 800588e:	8019      	strh	r1, [r3, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	6123      	str	r3, [r4, #16]
 8005894:	4616      	mov	r6, r2
 8005896:	e7bc      	b.n	8005812 <_printf_i+0x146>
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	6032      	str	r2, [r6, #0]
 800589e:	681e      	ldr	r6, [r3, #0]
 80058a0:	6862      	ldr	r2, [r4, #4]
 80058a2:	2100      	movs	r1, #0
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7fa fcab 	bl	8000200 <memchr>
 80058aa:	b108      	cbz	r0, 80058b0 <_printf_i+0x1e4>
 80058ac:	1b80      	subs	r0, r0, r6
 80058ae:	6060      	str	r0, [r4, #4]
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	2300      	movs	r3, #0
 80058b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ba:	e7aa      	b.n	8005812 <_printf_i+0x146>
 80058bc:	6923      	ldr	r3, [r4, #16]
 80058be:	4632      	mov	r2, r6
 80058c0:	4649      	mov	r1, r9
 80058c2:	4640      	mov	r0, r8
 80058c4:	47d0      	blx	sl
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0ad      	beq.n	8005826 <_printf_i+0x15a>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	079b      	lsls	r3, r3, #30
 80058ce:	d413      	bmi.n	80058f8 <_printf_i+0x22c>
 80058d0:	68e0      	ldr	r0, [r4, #12]
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	4298      	cmp	r0, r3
 80058d6:	bfb8      	it	lt
 80058d8:	4618      	movlt	r0, r3
 80058da:	e7a6      	b.n	800582a <_printf_i+0x15e>
 80058dc:	2301      	movs	r3, #1
 80058de:	4632      	mov	r2, r6
 80058e0:	4649      	mov	r1, r9
 80058e2:	4640      	mov	r0, r8
 80058e4:	47d0      	blx	sl
 80058e6:	3001      	adds	r0, #1
 80058e8:	d09d      	beq.n	8005826 <_printf_i+0x15a>
 80058ea:	3501      	adds	r5, #1
 80058ec:	68e3      	ldr	r3, [r4, #12]
 80058ee:	9903      	ldr	r1, [sp, #12]
 80058f0:	1a5b      	subs	r3, r3, r1
 80058f2:	42ab      	cmp	r3, r5
 80058f4:	dcf2      	bgt.n	80058dc <_printf_i+0x210>
 80058f6:	e7eb      	b.n	80058d0 <_printf_i+0x204>
 80058f8:	2500      	movs	r5, #0
 80058fa:	f104 0619 	add.w	r6, r4, #25
 80058fe:	e7f5      	b.n	80058ec <_printf_i+0x220>
 8005900:	08005c61 	.word	0x08005c61
 8005904:	08005c72 	.word	0x08005c72

08005908 <memmove>:
 8005908:	4288      	cmp	r0, r1
 800590a:	b510      	push	{r4, lr}
 800590c:	eb01 0402 	add.w	r4, r1, r2
 8005910:	d902      	bls.n	8005918 <memmove+0x10>
 8005912:	4284      	cmp	r4, r0
 8005914:	4623      	mov	r3, r4
 8005916:	d807      	bhi.n	8005928 <memmove+0x20>
 8005918:	1e43      	subs	r3, r0, #1
 800591a:	42a1      	cmp	r1, r4
 800591c:	d008      	beq.n	8005930 <memmove+0x28>
 800591e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005926:	e7f8      	b.n	800591a <memmove+0x12>
 8005928:	4402      	add	r2, r0
 800592a:	4601      	mov	r1, r0
 800592c:	428a      	cmp	r2, r1
 800592e:	d100      	bne.n	8005932 <memmove+0x2a>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800593a:	e7f7      	b.n	800592c <memmove+0x24>

0800593c <_realloc_r>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	4607      	mov	r7, r0
 8005942:	4614      	mov	r4, r2
 8005944:	460d      	mov	r5, r1
 8005946:	b921      	cbnz	r1, 8005952 <_realloc_r+0x16>
 8005948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	4611      	mov	r1, r2
 800594e:	f7ff bb93 	b.w	8005078 <_malloc_r>
 8005952:	b92a      	cbnz	r2, 8005960 <_realloc_r+0x24>
 8005954:	f7ff fcaa 	bl	80052ac <_free_r>
 8005958:	4625      	mov	r5, r4
 800595a:	4628      	mov	r0, r5
 800595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005960:	f000 f81a 	bl	8005998 <_malloc_usable_size_r>
 8005964:	4284      	cmp	r4, r0
 8005966:	4606      	mov	r6, r0
 8005968:	d802      	bhi.n	8005970 <_realloc_r+0x34>
 800596a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800596e:	d8f4      	bhi.n	800595a <_realloc_r+0x1e>
 8005970:	4621      	mov	r1, r4
 8005972:	4638      	mov	r0, r7
 8005974:	f7ff fb80 	bl	8005078 <_malloc_r>
 8005978:	4680      	mov	r8, r0
 800597a:	b908      	cbnz	r0, 8005980 <_realloc_r+0x44>
 800597c:	4645      	mov	r5, r8
 800597e:	e7ec      	b.n	800595a <_realloc_r+0x1e>
 8005980:	42b4      	cmp	r4, r6
 8005982:	4622      	mov	r2, r4
 8005984:	4629      	mov	r1, r5
 8005986:	bf28      	it	cs
 8005988:	4632      	movcs	r2, r6
 800598a:	f7ff fc81 	bl	8005290 <memcpy>
 800598e:	4629      	mov	r1, r5
 8005990:	4638      	mov	r0, r7
 8005992:	f7ff fc8b 	bl	80052ac <_free_r>
 8005996:	e7f1      	b.n	800597c <_realloc_r+0x40>

08005998 <_malloc_usable_size_r>:
 8005998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599c:	1f18      	subs	r0, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfbc      	itt	lt
 80059a2:	580b      	ldrlt	r3, [r1, r0]
 80059a4:	18c0      	addlt	r0, r0, r3
 80059a6:	4770      	bx	lr

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
